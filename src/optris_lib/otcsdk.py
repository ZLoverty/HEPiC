# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info

import platform
import sys
import os

# Ensure that the otcsdk.dll location is added to the Python DLL search path. This is
# necessary because since Python 3.8 the directories listed in the PATH variable are no 
# longer searched.
if sys.version_info >= (3, 8) and platform.system() == 'Windows':
    install_dir = os.environ.get('OTC_SDK_DIR')
    if install_dir == None:
        # Use relative location as fallback
        module_dir = os.path.dirname(__file__)
        os.add_dll_directory(os.path.join(module_dir, '../../../bin'))
    else:
        os.add_dll_directory(os.path.join(install_dir, 'bin'))

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _otcsdk_python
else:
    import _otcsdk_python


try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _otcsdk_python.delete_SwigPyIterator

    def value(self):
        return _otcsdk_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _otcsdk_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _otcsdk_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _otcsdk_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _otcsdk_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _otcsdk_python.SwigPyIterator_copy(self)

    def next(self):
        return _otcsdk_python.SwigPyIterator_next(self)

    def __next__(self):
        return _otcsdk_python.SwigPyIterator___next__(self)

    def previous(self):
        return _otcsdk_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _otcsdk_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _otcsdk_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _otcsdk_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _otcsdk_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _otcsdk_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _otcsdk_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _otcsdk_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _otcsdk_python:
_otcsdk_python.SwigPyIterator_swigregister(SwigPyIterator)
SHARED_PTR_DISOWN = _otcsdk_python.SHARED_PTR_DISOWN
class SDKException(Exception):
    r""" Exception raised by the SDK."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type message: string, in
        :param message: error message.
        """
        _otcsdk_python.SDKException_swiginit(self, _otcsdk_python.new_SDKException(*args))

    def __str__(self):
        r"""
        Returns the error message.

        :rtype: string
        :return: error message.
        """
        return _otcsdk_python.SDKException___str__(self)
    __swig_destroy__ = _otcsdk_python.delete_SDKException

# Register SDKException in _otcsdk_python:
_otcsdk_python.SDKException_swigregister(SDKException)
DeviceType_Unknown = _otcsdk_python.DeviceType_Unknown
DeviceType_PI1 = _otcsdk_python.DeviceType_PI1
DeviceType_PI160 = _otcsdk_python.DeviceType_PI160
DeviceType_PI2x0 = _otcsdk_python.DeviceType_PI2x0
DeviceType_PI160orPI2x0 = _otcsdk_python.DeviceType_PI160orPI2x0
DeviceType_PI4x0 = _otcsdk_python.DeviceType_PI4x0
DeviceType_PI4x0I = _otcsdk_python.DeviceType_PI4x0I
DeviceType_PI640 = _otcsdk_python.DeviceType_PI640
DeviceType_PI640I = _otcsdk_python.DeviceType_PI640I
DeviceType_PI1M = _otcsdk_python.DeviceType_PI1M
DeviceType_Xi80 = _otcsdk_python.DeviceType_Xi80
DeviceType_Xi160 = _otcsdk_python.DeviceType_Xi160
DeviceType_Xi400 = _otcsdk_python.DeviceType_Xi400
DeviceType_Xi410 = _otcsdk_python.DeviceType_Xi410
DeviceType_Xi410MT = _otcsdk_python.DeviceType_Xi410MT
DeviceType_Xi440 = _otcsdk_python.DeviceType_Xi440
DeviceType_Xi640 = _otcsdk_python.DeviceType_Xi640
DeviceType_Xi1M = _otcsdk_python.DeviceType_Xi1M

def deviceTypeToString(deviceType):
    r"""
    Returns a string representation of the given device type.

    Notes: Use `deviceTypeToString()` in Python instead.

    :type deviceType: int, in
    :param deviceType: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given device type.
    """
    return _otcsdk_python.deviceTypeToString(deviceType)
FlagState_Open = _otcsdk_python.FlagState_Open
r""" Flag is open."""
FlagState_Closed = _otcsdk_python.FlagState_Closed
r""" Flag is closed."""
FlagState_Opening = _otcsdk_python.FlagState_Opening
r""" Flag is opening."""
FlagState_Closing = _otcsdk_python.FlagState_Closing
r""" Flag is closing."""
FlagState_Error = _otcsdk_python.FlagState_Error
r""" Flag is in an error state."""
FlagState_Initializing = _otcsdk_python.FlagState_Initializing
r""" Flag state is beeing initialized/calibrated."""

def flagStateToString(flagState):
    r"""
    Returns a string representation of the given flag state.

    Notes: Use `flagStateToString()` in Python instead.

    :type flagState: int, in
    :param flagState: for which a string representation is desired.

    :rtype: string
    :return: string representation of the given flag state.
    """
    return _otcsdk_python.flagStateToString(flagState)
TemperaturePrecision_Unknown = _otcsdk_python.TemperaturePrecision_Unknown
r""" Unknown precision."""
TemperaturePrecision_Standard = _otcsdk_python.TemperaturePrecision_Standard
r""" Standard precision."""
TemperaturePrecision_High = _otcsdk_python.TemperaturePrecision_High
r""" Hight precision."""

def temperaturePrecisionToString(precision):
    r"""
    Returns a string representation of the given temperature precision.

    Notes: Use `temperaturePrecisionToString()` in Python instead.

    :type precision: int, in
    :param precision: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given temperature precision.
    """
    return _otcsdk_python.temperaturePrecisionToString(precision)
class TemperatureConverter(object):
    r""" Converts temperatures in 째C to and from their internal SDK representation."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type precision: int, in
        :param precision: of the temperature.
        """
        _otcsdk_python.TemperatureConverter_swiginit(self, _otcsdk_python.new_TemperatureConverter(*args))

    def setPrecision(self, precision):
        r"""
        Set the temperature precision.

        :type precision: int, in
        :param precision: to set.
        """
        return _otcsdk_python.TemperatureConverter_setPrecision(self, precision)

    def getPrecision(self):
        r"""
        Returns the temperature precision.

        :rtype: int
        :return: temperature precision.
        """
        return _otcsdk_python.TemperatureConverter_getPrecision(self)

    def toTemperature(self, value):
        r"""
        Converts an internal value to a temperature in 째C.

        :type value: float, in
        :param value: internal value to convert.

        :rtype: float
        :return: temperature in 째C.
        """
        return _otcsdk_python.TemperatureConverter_toTemperature(self, value)

    def toValue(self, temperature):
        r"""
        Converts a temperature in 째C to an internal value.

        :type temperature: float, in
        :param temperature: in 째C to convert.

        :rtype: int
        :return: internal value.
        """
        return _otcsdk_python.TemperatureConverter_toValue(self, temperature)

    def isTemperatureValid(self, temperature):
        r"""
        Checks if the given temperature in 째C is valid.

        :type temperature: float, in
        :param temperature: in 째C to check.

        :rtype: boolean
        :return: true if the temperature is valid. False otherwise.
        """
        return _otcsdk_python.TemperatureConverter_isTemperatureValid(self, temperature)

    def isValueValid(self, value):
        r"""
        Checks if an internal value is valid.

        :type value: int, in
        :param value: to check.

        :rtype: boolean
        :return: true if the value is valid. False otherwise.
        """
        return _otcsdk_python.TemperatureConverter_isValueValid(self, value)
    __swig_destroy__ = _otcsdk_python.delete_TemperatureConverter

# Register TemperatureConverter in _otcsdk_python:
_otcsdk_python.TemperatureConverter_swigregister(TemperatureConverter)
cvar = _otcsdk_python.cvar
INVALID_TEMPERATURE = cvar.INVALID_TEMPERATURE
INVALID_VALUE = cvar.INVALID_VALUE

class ConstFrameIterator(object):
    r""" Iterates over the frame in a row major fashion and grants read access."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, frame):
        r"""
        Constructor.

        :type frame: :py:class:`Frame`, in
        :param frame: to iterate over.
        """
        _otcsdk_python.ConstFrameIterator_swiginit(self, _otcsdk_python.new_ConstFrameIterator(frame))

    def hasNext(self):
        r"""
        Returns whether there is a next frame value.

        :rtype: boolean
        :return: true if there is a next frame value. False otherwise.
        """
        return _otcsdk_python.ConstFrameIterator_hasNext(self)

    def next(self):
        r""" Moves to the next frame value."""
        return _otcsdk_python.ConstFrameIterator_next(self)

    def getValue(self):
        r"""
        Returns the current frame value.

        :rtype: int
        :return: current frame value.
        """
        return _otcsdk_python.ConstFrameIterator_getValue(self)

    def getIndex(self):
        r"""
        Returns the index of the current frame value.

        :rtype: int
        :return: index of the current frame value.
        """
        return _otcsdk_python.ConstFrameIterator_getIndex(self)

    def getX(self):
        r"""
        Returns the x-coordinate of the current frame value.

        :rtype: int
        :return: x-coordinate of the current frame value.
        """
        return _otcsdk_python.ConstFrameIterator_getX(self)

    def getY(self):
        r"""
        Returns the y-coordinate of the current frame value.

        :rtype: int
        :return: y-coordinate of the current frame value.
        """
        return _otcsdk_python.ConstFrameIterator_getY(self)
    __swig_destroy__ = _otcsdk_python.delete_ConstFrameIterator

# Register ConstFrameIterator in _otcsdk_python:
_otcsdk_python.ConstFrameIterator_swigregister(ConstFrameIterator)
class Frame(object):
    r"""
    Represents a data frame received from a device.

    The encapsulated data may represent thermal or energy measurements in an internal format. See the
    specialized child classes like ThermalFrame for more details.

    The origin of coordinates is located in the upper left corner with the x-axis pointing right and
    the y-axis pointing down.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor.

        |

        *Overload 2:*
        Copy constructor.
        """
        _otcsdk_python.Frame_swiginit(self, _otcsdk_python.new_Frame(*args))
    __swig_destroy__ = _otcsdk_python.delete_Frame

    def getValue(self, *args):
        r"""
        *Overload 1:*

        Returns the frame data value at the given index.

        :type index: int, in
        :param index: of the desired frame data.

        :rtype: int
        :return: frame data value at the given index.

        :raises: SDKException if the index is out of range.

        |

        *Overload 2:*

        Returns the frame data value at the given coordinates.

        :type x: int, in
        :param x: coordinate.
        :type y: int, in
        :param y: coordinate.

        :rtype: int
        :return: frame data value at the given coordinates.

        :raises: SDKException if the coordinates are out of range.
        """
        return _otcsdk_python.Frame_getValue(self, *args)

    def getConstIterator(self):
        r"""
        Returns an iterator with read access.

        The iterator traverses the frame in a row major fashion.

        :rtype: :py:class:`ConstFrameIterator`
        :return: iterator with read access.
        """
        return _otcsdk_python.Frame_getConstIterator(self)

    def getWidth(self):
        r"""
        Returns the width in pixels of the frame.

        :rtype: int
        :return: width in pixel of the frame.
        """
        return _otcsdk_python.Frame_getWidth(self)

    def getHeight(self):
        r"""
        Returns the height in pixel of the frame.

        :rtype: int
        :return: height in pixels of the frame.
        """
        return _otcsdk_python.Frame_getHeight(self)

    def getSize(self):
        r"""
        Returns the overall size in pixels of the frame (width * height).

        :rtype: int
        :return: size in pixels of the frame.
        """
        return _otcsdk_python.Frame_getSize(self)

    def isEmpty(self):
        r"""
        Returns whether the frame is empty.

        :rtype: boolean
        :return: true if the frame is empty. False otherwise.
        """
        return _otcsdk_python.Frame_isEmpty(self)

    def clear(self):
        r""" Clears the frame data."""
        return _otcsdk_python.Frame_clear(self)

    def resize(self, width, height):
        r"""
        Resizes the frame.

        :type width: int, in
        :param width:  of the resized frame in pixels.
        :type height: int, in
        :param height: of the resized frame in pixels.
        """
        return _otcsdk_python.Frame_resize(self, width, height)

    def clone(self):
        r"""
        Returns a complete copy of this frame.

        :rtype: :py:class:`Frame`
        :return: a complete copy of this frame.
        """
        return _otcsdk_python.Frame_clone(self)

    def copyDataTo(self, destination):
        r"""
        Copies the internal data to a one-dimensional array or vector.

        Warning: Make sure the destination has at least the size returned by getSize().

        :type destination: int, out
        :param destination: to copy the internal data to.
        :type size: int, in
        :param size:        as element count. The specified size is limited to [0, getSize()].
        """
        return _otcsdk_python.Frame_copyDataTo(self, destination)

# Register Frame in _otcsdk_python:
_otcsdk_python.Frame_swigregister(Frame)
class ThermalFrame(Frame):
    r""" Encapsulates thermal frame data received from a device."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor.

        |

        *Overload 2:*
        Copy constructor.
        """
        _otcsdk_python.ThermalFrame_swiginit(self, _otcsdk_python.new_ThermalFrame(*args))
    __swig_destroy__ = _otcsdk_python.delete_ThermalFrame

    def getTemperature(self, *args):
        r"""
        *Overload 1:*

        Returns the temperature in in 째C at the given index.

        :type index: int, in
        :param index: of the desired frame temperature.

        :rtype: float
        :return: temperature in in 째C at the given index.

        :raises: SDKException if index is out of range.

        |

        *Overload 2:*

        Returns the temperature in in 째C at the given coordinates.

        :type x: int, in
        :param x: coordinate.
        :type y: int, in
        :param y: coordinate.

        :rtype: float
        :return: temperature in in 째C at the given coordinate.

        :raises: SDKException if the coordinates are out of range.
        """
        return _otcsdk_python.ThermalFrame_getTemperature(self, *args)

    def getTemperaturePrecision(self):
        r"""
        Returns the precision of the temperatures stored in the frame.

        :rtype: int
        :return: precision of the temperatures stored in the frame.
        """
        return _otcsdk_python.ThermalFrame_getTemperaturePrecision(self)

    def copyTemperaturesTo(self, destination):
        r"""
        Copies the thermal data as degree Celsius to a one-dimensional array or vector.

        Warning: Make sure the destination has at least the size returned by getSize().

        :type destination: float, out
        :param destination: to copy the internal data to.
        :type size: int, in
        :param size:        as element count. The specified size is limited to [0, getSize()].
        """
        return _otcsdk_python.ThermalFrame_copyTemperaturesTo(self, destination)

    def getConverter(self):
        r"""
        Returns the temperature converter.

        It can be used to convert and validate the thermal frame values to and from temperatures in 째C.

        :rtype: :py:class:`TemperatureConverter`
        :return: temperature converter.
        """
        return _otcsdk_python.ThermalFrame_getConverter(self)

    def clone(self):
        r"""
        Returns a complete copy of this frame.

        :rtype: :py:class:`ThermalFrame`
        :return: a complete copy of this frame.
        """
        return _otcsdk_python.ThermalFrame_clone(self)

# Register ThermalFrame in _otcsdk_python:
_otcsdk_python.ThermalFrame_swigregister(ThermalFrame)
class FrameMetadata(object):
    r"""
    Encapsulates the metadata of frames provided by the devices.

    This metadata is passed alongside the frame data from the devices via the streaming interface (e.g. USB, Ethernet).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.FrameMetadata_swiginit(self, _otcsdk_python.new_FrameMetadata())

    def getSize(self):
        r"""
        Returns the size of the raw metadata structure in bytes.

        :rtype: int
        :return: size of the raw metadata structure in bytes.
        """
        return _otcsdk_python.FrameMetadata_getSize(self)

    def setSize(self, size):
        r"""
        Sets the size of the raw metadata structure in bytes.

        :type size: int, in
        :param size: of the raw metadata structure in bytes.
        """
        return _otcsdk_python.FrameMetadata_setSize(self, size)

    def isFrameDataReliable(self):
        r"""
        Returns whether the data provided in the associated frame is reliable.

        During the initial startup calibration the data provide by the device is not reliable.

        :rtype: boolean
        :return: true if the data provided in the associated frame is reliable. False otherwise.
        """
        return _otcsdk_python.FrameMetadata_isFrameDataReliable(self)

    def getCounter(self):
        r"""
        Returns a consecutive number for each received frame.

        :rtype: int
        :return: consecutive number for each received frame.
        """
        return _otcsdk_python.FrameMetadata_getCounter(self)

    def getCounterHardware(self):
        r"""
        Returns the frame number received from the device.

        Notes: This counter may overflow.

        :rtype: int
        :return: frame number received form the device.
        """
        return _otcsdk_python.FrameMetadata_getCounterHardware(self)

    def setCounters(self, counter, counterHardware):
        r"""
        Sets the frame counters.

        :type counter: int, in
        :param counter:         to set.
        :type counterHardware: int, in
        :param counterHardware: to set.
        """
        return _otcsdk_python.FrameMetadata_setCounters(self, counter, counterHardware)

    def getTimestamp(self):
        r"""
        Returns the frame timestamp in UNITS (10000000 units per second).

        :rtype: int
        :return: frame timestamp in UNITS (10000000 units per second).
        """
        return _otcsdk_python.FrameMetadata_getTimestamp(self)

    def getTimestampMedia(self):
        r"""
        Returns the media timestamp.

        :rtype: int
        :return: media time stamp.
        """
        return _otcsdk_python.FrameMetadata_getTimestampMedia(self)

    def setTimestamps(self, timestamp, timestampMedia):
        r"""
        Sets the timestamps.

        :type timestamp: int, in
        :param timestamp:      frame timestamp in UNITS (10000000 units per second).
        :type timestampMedia: int, in
        :param timestampMedia: media timestamp.
        """
        return _otcsdk_python.FrameMetadata_setTimestamps(self, timestamp, timestampMedia)

    def getFlagState(self):
        r"""
        Returns the state of the shutter flag at frame capturing time.

        :rtype: int
        :return: state of the shutter flag at frame capturing time.
        """
        return _otcsdk_python.FrameMetadata_getFlagState(self)

    def setFlagState(self, flagState):
        r"""
        Sets the state of the shutter flag.

        :type flagState: int, in
        :param flagState: to set.
        """
        return _otcsdk_python.FrameMetadata_setFlagState(self, flagState)

    def getTemperatureFlag(self):
        r"""
        Returns the shutter flag temperature in 째C at frame capturing time.

        :rtype: float
        :return: shutter flag temperature in 째C at frame capturing time.
        """
        return _otcsdk_python.FrameMetadata_getTemperatureFlag(self)

    def getTemperatureBox(self):
        r"""
        Returns the housing temperature in 째C at frame capturing time.

        :rtype: float
        :return: housing temperature in 째C at frame capturing time.
        """
        return _otcsdk_python.FrameMetadata_getTemperatureBox(self)

    def getTemperatureChip(self):
        r"""
        Returns the sensor chip temperature in 째C at frame capturing time.

        :rtype: float
        :return: sensor chip temperature in 째C at frame capturing time.
        """
        return _otcsdk_python.FrameMetadata_getTemperatureChip(self)

    def setTemperatures(self, flag, box, chip):
        r"""
        Set the flag, box and chip temperatures in 째C.

        :type flag: float, in
        :param flag: temperature in 째C.
        :type box: float, in
        :param box:  temperature in 째C.
        :type chip: float, in
        :param chip: temperature in 째C.
        """
        return _otcsdk_python.FrameMetadata_setTemperatures(self, flag, box, chip)

    def getPifAiValue(self, deviceIndex, pinIndex):
        r"""
        Returns the analog input value on the given PIF channel.

        Warning: The input values returned from channels on PIF devices that are just configurable but not
                 actually connected to the camera (actualDeviceCount <= deviceIndex < configurableDeviceCount)
                 are invalid!

        :type deviceIndex: int, in
        :param deviceIndex: of the PIF device.
        :type pinIndex: int, in
        :param pinIndex:    of the pin on the specified PIF device.

        :rtype: float
        :return: analog input value on the given PIF channel.

        :raises: SDKException if either the device or pin index is out of range.
        """
        return _otcsdk_python.FrameMetadata_getPifAiValue(self, deviceIndex, pinIndex)

    def getPifDiValue(self, deviceIndex, pinIndex):
        r"""
        Returns the digital input value on the given PIF channel.

        Warning: The input values returned from channels on PIF devices that are just configurable but not
                 actually connected to the camera (actualDeviceCount <= deviceIndex < configurableDeviceCount)
                 are invalid!

        :type deviceIndex: int, in
        :param deviceIndex: of the PIF device.
        :type pinIndex: int, in
        :param pinIndex:    of the pin on the specified PIF device.

        :rtype: boolean
        :return: digital input value on the given PIF channel.

        :raises: SDKException if either the device or pin index is out of range.
        """
        return _otcsdk_python.FrameMetadata_getPifDiValue(self, deviceIndex, pinIndex)

    def getPifActualDeviceCount(self):
        r"""
        Returns the count of actually connected PIF devices.

        :rtype: int
        :return: count of actually connected PIF devices.
        """
        return _otcsdk_python.FrameMetadata_getPifActualDeviceCount(self)

    def getPifConfigurableDeviceCount(self):
        r"""
        Returns the count of configurable PIF devices.

        :rtype: int
        :return: count of configurable PIF devices.
        """
        return _otcsdk_python.FrameMetadata_getPifConfigurableDeviceCount(self)

    def getPifAiCountPerDevice(self):
        r"""
        Returns the count of analog input channels per PIF device.

        :rtype: int
        :return: count of analog input channels per PIF device.
        """
        return _otcsdk_python.FrameMetadata_getPifAiCountPerDevice(self)

    def getPifDiCountPerDevice(self):
        r"""
        Returns the count of digital input channels per PIF device.

        :rtype: int
        :return: count of digital input channels per PIF device.
        """
        return _otcsdk_python.FrameMetadata_getPifDiCountPerDevice(self)

    def setPifCounts(self, actualDeviceCount, configurableDeviceCount, aiCountPerDevice, diCountPerDevice):
        r"""
        Sets the counts of the PIF devices and input channels.

        :type actualDeviceCount: int, in
        :param actualDeviceCount:       count of actual connected PIF devices.
        :type configurableDeviceCount: int, in
        :param configurableDeviceCount: count of configurable PIF devices.
        :type aiCountPerDevice: int, in
        :param aiCountPerDevice:        count of analog input channels per PIF device.
        :type diCountPerDevice: int, in
        :param diCountPerDevice:        count of digital input channels per PIF device.
        """
        return _otcsdk_python.FrameMetadata_setPifCounts(self, actualDeviceCount, configurableDeviceCount, aiCountPerDevice, diCountPerDevice)

    def setPifAiValue(self, deviceIndex, pinIndex, value):
        r"""
        Sets the value of the specified PIF analog input channel.

        :type deviceIndex: int, in
        :param deviceIndex: of the PIF device.
        :type pinIndex: int, in
        :param pinIndex:    of the pin on the specified PIF device.
        :type value: float, in
        :param value:       to set.

        :raises: SDKException if either the device or pin index is out of range.
        """
        return _otcsdk_python.FrameMetadata_setPifAiValue(self, deviceIndex, pinIndex, value)

    def setPifDiValue(self, deviceIndex, pinIndex, value):
        r"""
        Sets the value of the specified PIF digital input channel.

        :type deviceIndex: int, in
        :param deviceIndex: of the PIF device.
        :type pinIndex: int, in
        :param pinIndex:    of the pin on the specified PIF device.
        :type value: boolean, in
        :param value:       to set.

        :raises: SDKException if either the device or pin index is out of range.
        """
        return _otcsdk_python.FrameMetadata_setPifDiValue(self, deviceIndex, pinIndex, value)

    def clone(self):
        r"""
        Returns a complete copy of this metadata.

        :rtype: :py:class:`FrameMetadata`
        :return: a complete copy of this metadata.
        """
        return _otcsdk_python.FrameMetadata_clone(self)
    __swig_destroy__ = _otcsdk_python.delete_FrameMetadata

# Register FrameMetadata in _otcsdk_python:
_otcsdk_python.FrameMetadata_swigregister(FrameMetadata)
class OperationMode(object):
    r"""
    Defines the interface for classes realizing operation modes.

    Each operation mode encapsulates a valid combination of the following configuration settings:

     - Optics
     - Temperature range
     - Output video format

    The available operation modes depend on the device, its optics, its calibrations, the video format
    definitions and the type of connection to the device (USB, Ethernet).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _otcsdk_python.delete_OperationMode

    def getFieldOfView(self):
        r"""
        Returns the field of view in degrees of the optics.

        :rtype: int
        :return: field of view in degrees of the optics.
        """
        return _otcsdk_python.OperationMode_getFieldOfView(self)

    def getOpticsText(self):
        r"""
        Returns an optional string that further specifies the optics.

        :rtype: string
        :return: optional string that further specifies the optics.
        """
        return _otcsdk_python.OperationMode_getOpticsText(self)

    def getTemperatureLowerLimit(self):
        r"""
        Returns the lower limit temperature in 째C depended whether the range is extended.

        :rtype: float
        :return: lower limit temperature in 째C depended whether the range is extended.
        """
        return _otcsdk_python.OperationMode_getTemperatureLowerLimit(self)

    def getTemperatureUpperLimit(self):
        r"""
        Returns the upper limit temperature in 째C depended whether the range is extended.

        :rtype: float
        :return: upper limit temperature in 째C depended whether the range is extended.
        """
        return _otcsdk_python.OperationMode_getTemperatureUpperLimit(self)

    def getTemperatureNormalLowerLimit(self):
        r"""
        Returns the lower non extended limit temperature in 째C.

        :rtype: float
        :return: lower non extended limit temperature in 째C.
        """
        return _otcsdk_python.OperationMode_getTemperatureNormalLowerLimit(self)

    def getTemperatureNormalUpperLimit(self):
        r"""
        Returns the upper non extended limit temperature in 째CS.

        :rtype: float
        :return: upper non extended limit temperature in 째C.
        """
        return _otcsdk_python.OperationMode_getTemperatureNormalUpperLimit(self)

    def getTemperatureExtendedLowerLimit(self):
        r"""
        Returns the lower extended limit temperature in 째C.

        If this limit can not be extened, this will return the same value as getTemperatureNormalLowerLimit().

        :rtype: float
        :return: lower extend limit temperature in 째CS.
        """
        return _otcsdk_python.OperationMode_getTemperatureExtendedLowerLimit(self)

    def getTemperatureExtendedUpperLimit(self):
        r"""
        Returns the upper extended limit temperature in 째C.

        If this limit can not be extened, this will return the same value as getTemperatureNormalUpperLimit().

        :rtype: float
        :return: upper extend limit temperature in 째CS.
        """
        return _otcsdk_python.OperationMode_getTemperatureExtendedUpperLimit(self)

    def isTemperatureRangeExtended(self):
        r"""
        Returns whether the temperature range is currently extended.

        :rtype: boolean
        :return: true, if the temperature range is currently extended. False, otherwise.
        """
        return _otcsdk_python.OperationMode_isTemperatureRangeExtended(self)

    def getFrameWidth(self):
        r"""
        Returns the width of the frame in pixels.

        :rtype: int
        :return: width of the frame in pixels.
        """
        return _otcsdk_python.OperationMode_getFrameWidth(self)

    def getFrameHeight(self):
        r"""
        Returns the height of the frame in pixels.

        :rtype: int
        :return: height of the frame in pixels.
        """
        return _otcsdk_python.OperationMode_getFrameHeight(self)

    def getFramerate(self):
        r"""
        Returns the framerate in Hz.

        :rtype: int
        :return: framerate in Hz.
        """
        return _otcsdk_python.OperationMode_getFramerate(self)

    def __str__(self):
        r"""
        Returns a string representation of the operation mode.

        :rtype: string
        :return: string representation of the operation mode.
        """
        return _otcsdk_python.OperationMode___str__(self)

# Register OperationMode in _otcsdk_python:
_otcsdk_python.OperationMode_swigregister(OperationMode)
class OperationModeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.OperationModeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.OperationModeVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.OperationModeVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.OperationModeVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.OperationModeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.OperationModeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.OperationModeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.OperationModeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.OperationModeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.OperationModeVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.OperationModeVector_pop(self)

    def append(self, x):
        return _otcsdk_python.OperationModeVector_append(self, x)

    def empty(self):
        return _otcsdk_python.OperationModeVector_empty(self)

    def size(self):
        return _otcsdk_python.OperationModeVector_size(self)

    def swap(self, v):
        return _otcsdk_python.OperationModeVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.OperationModeVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.OperationModeVector_rend(self)

    def clear(self):
        return _otcsdk_python.OperationModeVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.OperationModeVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.OperationModeVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.OperationModeVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.OperationModeVector_swiginit(self, _otcsdk_python.new_OperationModeVector(*args))

    def push_back(self, x):
        return _otcsdk_python.OperationModeVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.OperationModeVector_front(self)

    def back(self):
        return _otcsdk_python.OperationModeVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.OperationModeVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.OperationModeVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.OperationModeVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.OperationModeVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.OperationModeVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_OperationModeVector

# Register OperationModeVector in _otcsdk_python:
_otcsdk_python.OperationModeVector_swigregister(OperationModeVector)
class Pixel(object):
    r""" Represents a pixel with three color channels and 8 bits of color depth."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type red: unsigned char, in
        :param red:   color value in [0, 255].
        :type green: unsigned char, in
        :param green: color value in [0, 255].
        :type blue: unsigned char, in
        :param blue:  color value in [0, 255].
        """
        _otcsdk_python.Pixel_swiginit(self, _otcsdk_python.new_Pixel(*args))

    def getRed(self):
        r"""
        Returns the red color value.

        :rtype: unsigned char
        :return: red color value in [0, 255].
        """
        return _otcsdk_python.Pixel_getRed(self)

    def getGreen(self):
        r"""
        Returns the green color value.

        :rtype: unsigned char
        :return: green color value in [0, 255].
        """
        return _otcsdk_python.Pixel_getGreen(self)

    def getBlue(self):
        r"""
        Returns the blue color value.

        :rtype: unsigned char
        :return: blue color value in [0, 255].
        """
        return _otcsdk_python.Pixel_getBlue(self)

    def __str__(self):
        r"""
        Returns a string representation of the pixel (red, green, blue).

        :rtype: string
        :return: string representation of the pixel.
        """
        return _otcsdk_python.Pixel___str__(self)
    __swig_destroy__ = _otcsdk_python.delete_Pixel

# Register Pixel in _otcsdk_python:
_otcsdk_python.Pixel_swigregister(Pixel)
ColorFormat_RGB = _otcsdk_python.ColorFormat_RGB
r""" Pixel colors values are stored in the sequence: (red, green, blue)."""
ColorFormat_BGR = _otcsdk_python.ColorFormat_BGR
r""" Pixel colors values are stored in the sequence: (blue, green, red)."""
WidthAlignment_OneByte = _otcsdk_python.WidthAlignment_OneByte
r""" The row size is aligned to one byte."""
WidthAlignment_TwoBytes = _otcsdk_python.WidthAlignment_TwoBytes
r""" The row size is aligned to two bytes."""
WidthAlignment_FourBytes = _otcsdk_python.WidthAlignment_FourBytes
r""" The row size is aligned to four bytes."""
WidthAlignment_EightBytes = _otcsdk_python.WidthAlignment_EightBytes
r""" The row size is aligned to eight bytes."""
class ImageInfo(object):
    r""" Encapsulates all relevant information about a false color image."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, colorFormat, widthAlignment):
        r"""
        Constructor.

        :type colorFormat: int, in
        :param colorFormat:    of the image.
        :type widthAlignment: int, in
        :param widthAlignment: of the image.
        """
        _otcsdk_python.ImageInfo_swiginit(self, _otcsdk_python.new_ImageInfo(colorFormat, widthAlignment))

    def getColorFormat(self):
        r"""
        Returns the color format of the image.

        :rtype: int
        :return: color format of the image.
        """
        return _otcsdk_python.ImageInfo_getColorFormat(self)

    def getChannels(self):
        r"""
        Returns the number of color channels.

        :rtype: int
        :return: number of color channels.
        """
        return _otcsdk_python.ImageInfo_getChannels(self)

    def getOffsetRed(self):
        r"""
        Returns the offset of the red color byte.

        :rtype: int
        :return: offset of the red color byte.
        """
        return _otcsdk_python.ImageInfo_getOffsetRed(self)

    def getOffsetGreen(self):
        r"""
        Returns the offset of the green color byte.

        :rtype: int
        :return: offset of the green color byte.
        """
        return _otcsdk_python.ImageInfo_getOffsetGreen(self)

    def getOffsetBlue(self):
        r"""
        Returns the offset of the blue color byte.

        :rtype: int
        :return: offset of the blue color byte.
        """
        return _otcsdk_python.ImageInfo_getOffsetBlue(self)

    def resize(self, width, height):
        r"""
        Resizes the image to the given dimension.

        :rtype: int
        :return: resulting image size in bytes.
        """
        return _otcsdk_python.ImageInfo_resize(self, width, height)

    def getWidth(self):
        r"""
        Returns the image width in pixels.

        :rtype: int
        :return: image width in pixels.
        """
        return _otcsdk_python.ImageInfo_getWidth(self)

    def getStride(self):
        r"""
        Returns the image stride in bytes.

        The stride is the image width in bytes including potential padding.

        :rtype: int
        :return: image stride in bytes.
        """
        return _otcsdk_python.ImageInfo_getStride(self)

    def getHeight(self):
        r"""
        Returns the image height in pixels.

        :rtype: int
        :return: image height in pixels.
        """
        return _otcsdk_python.ImageInfo_getHeight(self)

    def getSize(self):
        r"""
        Returns the image size in pixels.

        :rtype: int
        :return: image size in pixels.
        """
        return _otcsdk_python.ImageInfo_getSize(self)

    def getWidthAlignment(self):
        r"""
        Returns the width alignment of the image.

        :rtype: int
        :return: width alignment of the image.
        """
        return _otcsdk_python.ImageInfo_getWidthAlignment(self)

    def getWidthPaddingInBytes(self):
        r"""
        Returns width padding in bytes.

        :rtype: int
        :return: width padding in bytes.
        """
        return _otcsdk_python.ImageInfo_getWidthPaddingInBytes(self)
    __swig_destroy__ = _otcsdk_python.delete_ImageInfo

# Register ImageInfo in _otcsdk_python:
_otcsdk_python.ImageInfo_swigregister(ImageInfo)
class ImageIterator(object):
    r"""
    Iterates in a row major fashion over the image and grants read and write access to the pixels.

    Potential width padding will be skipped.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, image):
        r"""
        Constructor.

        :type image: :py:class:`Image`, in
        :param image: to iterate over.
        """
        _otcsdk_python.ImageIterator_swiginit(self, _otcsdk_python.new_ImageIterator(image))

    def hasNext(self):
        r"""
        Returns whether there is a next pixel.

        :rtype: boolean
        :return: true if there is a next pixel. False otherwise.
        """
        return _otcsdk_python.ImageIterator_hasNext(self)

    def next(self):
        r""" Moves to the next pixel."""
        return _otcsdk_python.ImageIterator_next(self)

    def getPixel(self):
        r"""
        Returns the current pixel.

        :rtype: :py:class:`Pixel`
        :return: current pixel.
        """
        return _otcsdk_python.ImageIterator_getPixel(self)

    def setPixel(self, pixel):
        r"""
        Sets the current pixel.

        :type pixel: :py:class:`Pixel`, in
        :param pixel: to set.
        """
        return _otcsdk_python.ImageIterator_setPixel(self, pixel)

    def getIndex(self):
        r"""
        Returns the current pixel index.

        :rtype: int
        :return: index of the current pixel.
        """
        return _otcsdk_python.ImageIterator_getIndex(self)

    def getX(self):
        r"""
        Returns the x-coordinate of the current pixel.

        :rtype: int
        :return: x-coordinate of the current pixel.
        """
        return _otcsdk_python.ImageIterator_getX(self)

    def getY(self):
        r"""
        Returns the y-coordinate of the current pixel.

        :rtype: int
        :return: y-coordinate of the current pixel.
        """
        return _otcsdk_python.ImageIterator_getY(self)
    __swig_destroy__ = _otcsdk_python.delete_ImageIterator

# Register ImageIterator in _otcsdk_python:
_otcsdk_python.ImageIterator_swigregister(ImageIterator)
class ConstImageIterator(object):
    r"""
    Iterates in a row major fashion over the image and grants read access to the pixels.

    Potential width padding will be skipped.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, image):
        r"""
        Constructor.

        :type image: :py:class:`Image`, in
        :param image: to iterate over.
        """
        _otcsdk_python.ConstImageIterator_swiginit(self, _otcsdk_python.new_ConstImageIterator(image))

    def hasNext(self):
        r"""
        Returns whether there is a next pixel.

        :rtype: boolean
        :return: true if there is a next pixel. False otherwise.
        """
        return _otcsdk_python.ConstImageIterator_hasNext(self)

    def next(self):
        r""" Moves to the next pixel."""
        return _otcsdk_python.ConstImageIterator_next(self)

    def getPixel(self):
        r"""
        Returns the current pixel.

        :rtype: :py:class:`Pixel`
        :return: current pixel.
        """
        return _otcsdk_python.ConstImageIterator_getPixel(self)

    def getIndex(self):
        r"""
        Returns the current pixel index.

        :rtype: int
        :return: index of the current pixel.
        """
        return _otcsdk_python.ConstImageIterator_getIndex(self)

    def getX(self):
        r"""
        Returns the x-coordinate of the current pixel.

        :rtype: int
        :return: x-coordinate of the current pixel.
        """
        return _otcsdk_python.ConstImageIterator_getX(self)

    def getY(self):
        r"""
        Returns the y-coordinate of the current pixel.

        :rtype: int
        :return: y-coordinate of the current pixel.
        """
        return _otcsdk_python.ConstImageIterator_getY(self)
    __swig_destroy__ = _otcsdk_python.delete_ConstImageIterator

# Register ConstImageIterator in _otcsdk_python:
_otcsdk_python.ConstImageIterator_swigregister(ConstImageIterator)
class Image(object):
    r"""
    Encapsulates false color images with 8-bit color depth.

    The individual pixel values, like red, green or blue, are stored in a one-dimensional array.

    Depending on the width alignment additional bytes may be added at the end of each row to ensure
    that its size in bytes respects this alignment. The setter and getter functions as well as the
    iterators will skip this padding.

    The origin of coordinates is located in the upper left corner with the x-axis pointing right and
    the y-axis pointing down.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, colorFormat, widthAlignment):
        r"""
        Constructor.

        :type colorFormat: int, in
        :param colorFormat:    defines the sequence in which the pixel values are stored internally.
        :type widthAlignment: int, in
        :param widthAlignment: defines the alignment of the row size in bytes. If, e.g., it is set to
                                      four bytes, the row size will potentially be padded at the end so that
                                      it is a multiple of four.
        """
        _otcsdk_python.Image_swiginit(self, _otcsdk_python.new_Image(colorFormat, widthAlignment))

    def getPixel(self, *args):
        r"""
        *Overload 1:*

        Returns the pixel at the given index.

        :type index: int, in
        :param index: of the desired pixel.

        :rtype: :py:class:`Pixel`
        :return: the pixel at the given index.

        :raises: SDKException if the index is out of bounds.

        |

        *Overload 2:*

        Returns the pixel at the given coordinates.

        :type x: int, in
        :param x: coordinate.
        :type y: int, in
        :param y: coordinate.

        :rtype: :py:class:`Pixel`
        :return: the pixel at the given coordinates.

        :raises: SDKException if the coordinates are out of bounds.
        """
        return _otcsdk_python.Image_getPixel(self, *args)

    def setPixel(self, *args):
        r"""
        *Overload 1:*

        Sets the pixel at the given index.

        :type index: int, in
        :param index: of the pixel to set.
        :type pixel: :py:class:`Pixel`, in
        :param pixel: to set.

        :raises: SDKException if the index is out of bounds.

        |

        *Overload 2:*

        Sets the pixel at the given coordinates.

        :type x: int, in
        :param x:     coordinate.
        :type y: int, in
        :param y:     coordinate.
        :type pixel: :py:class:`Pixel`, in
        :param pixel: to set.

        :raises: SDKException if the coordinates are out of bounds.
        """
        return _otcsdk_python.Image_setPixel(self, *args)

    def getIterator(self):
        r"""
        Returns an iterator with read and write access.

        The iterator traverses the image in a row major fashion and skips potential width padding.

        :rtype: :py:class:`ImageIterator`
        :return: iterator with read and write access.
        """
        return _otcsdk_python.Image_getIterator(self)

    def getConstIterator(self):
        r"""
        Returns an iterator with read access.

        The iterator traverses the image in a row major fashion and skips potential width padding.

        :rtype: :py:class:`ConstImageIterator`
        :return: iterator with read access.
        """
        return _otcsdk_python.Image_getConstIterator(self)

    def getWidth(self):
        r"""
        Returns the width of the image in pixels.

        :rtype: int
        :return: image width in pixels.
        """
        return _otcsdk_python.Image_getWidth(self)

    def getStride(self):
        r"""
        Returns the stride of the image in bytes.

        The stride is the image width in bytes including potential padding.

        :rtype: int
        :return: stride of the image in bytes.
        """
        return _otcsdk_python.Image_getStride(self)

    def getHeight(self):
        r"""
        Returns the height of the image in pixels.

        :rtype: int
        :return: image height in pixels.
        """
        return _otcsdk_python.Image_getHeight(self)

    def getSize(self):
        r"""
        Returns the size of the image as total number of pixels.

        :rtype: int
        :return: size of the image as total number of pixels.
        """
        return _otcsdk_python.Image_getSize(self)

    def getSizeInBytes(self):
        r"""
        Returns the size of the internal storage in bytes.

        This includes potential width padding.

        :rtype: int
        :return: size of the internal storage in bytes.
        """
        return _otcsdk_python.Image_getSizeInBytes(self)

    def isEmpty(self):
        r"""
        Returns whether the image is empty.

        :rtype: boolean
        :return: true if the image is empty. False otherwise.
        """
        return _otcsdk_python.Image_isEmpty(self)

    def clear(self):
        r""" Clears the image."""
        return _otcsdk_python.Image_clear(self)

    def resize(self, width, height):
        r"""
        Resizes the image to the given dimensions.

        :type width: int, in
        :param width:  in pixels.
        :type height: int, in
        :param height: in pixels.
        """
        return _otcsdk_python.Image_resize(self, width, height)

    def getColorFormat(self):
        r"""
        Returns the color format.

        :rtype: int
        :return: color format.
        """
        return _otcsdk_python.Image_getColorFormat(self)

    def getWidthAlignment(self):
        r"""
        Returns the width alignment.

        :rtype: int
        :return: width alignment.
        """
        return _otcsdk_python.Image_getWidthAlignment(self)

    def clone(self):
        r"""
        Returns a complete copy of this image.

        :rtype: :py:class:`Image`
        :return: complete copy of this image.
        """
        return _otcsdk_python.Image_clone(self)

    def copyDataTo(self, destination):
        r"""
        Copies the internally stored pixel values to the given array.

        This includes potential width padding.

        Warning: No range checks are performed. The correct size of the destination array
                 can be acquired with the getSizeInBytes() function.

        :type destination: unsigned char, out
        :param destination: array to copy the data to.
        :type size: int, in
        :param size:        in bytes. The specified size is limited to [0, frame size in bytes].

        See also: getSizeInBytes()
        """
        return _otcsdk_python.Image_copyDataTo(self, destination)
    __swig_destroy__ = _otcsdk_python.delete_Image

# Register Image in _otcsdk_python:
_otcsdk_python.Image_swigregister(Image)
class Slope(object):
    r"""
    Encapsulates the parameters of a linear transformation.

    y(x) = gain * x + offset
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type gain: float, in
        :param gain:   of the linear transformation.
        :type offset: float, in
        :param offset: of the linear transformation.
        """
        _otcsdk_python.Slope_swiginit(self, _otcsdk_python.new_Slope(*args))
    gain = property(_otcsdk_python.Slope_gain_get, _otcsdk_python.Slope_gain_set, doc=r""" Gain of the linear transformation.""")
    offset = property(_otcsdk_python.Slope_offset_get, _otcsdk_python.Slope_offset_set, doc=r""" Offset of the linear transformation.""")
    __swig_destroy__ = _otcsdk_python.delete_Slope

# Register Slope in _otcsdk_python:
_otcsdk_python.Slope_swigregister(Slope)
SnapshotTrigger_DigitalInput = _otcsdk_python.SnapshotTrigger_DigitalInput
r""" Triggered by digital input."""
SnapshotTrigger_AnalogInput = _otcsdk_python.SnapshotTrigger_AnalogInput
r""" Triggered by analog input."""
SnapshotTrigger_Software = _otcsdk_python.SnapshotTrigger_Software
r""" Triggered by software."""
SnapshotType_Snapshot = _otcsdk_python.SnapshotType_Snapshot
r""" Event source is snapshot."""
SnapshotType_SnapshotOnEdge = _otcsdk_python.SnapshotType_SnapshotOnEdge
r""" Event source is snapshot on edge."""
class SnapshotEvent(object):
    r""" Encapsulates data about a snapshot event."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type trigger: int, in
        :param trigger: input trigger that created the snapshot event.
        :type channel: unsigned char, in
        :param channel: on which the trigger occurred.
        :type type: int, in
        :param type:    of the snapshot event.
        """
        _otcsdk_python.SnapshotEvent_swiginit(self, _otcsdk_python.new_SnapshotEvent(*args))
    trigger = property(_otcsdk_python.SnapshotEvent_trigger_get, _otcsdk_python.SnapshotEvent_trigger_set, doc=r""" Input trigger type of the snapshot event.""")
    channel = property(_otcsdk_python.SnapshotEvent_channel_get, _otcsdk_python.SnapshotEvent_channel_set, doc=r""" Analog or digital input channel of the snapshot event.""")
    type = property(_otcsdk_python.SnapshotEvent_type_get, _otcsdk_python.SnapshotEvent_type_set, doc=r""" Type of the snapshot event.""")
    __swig_destroy__ = _otcsdk_python.delete_SnapshotEvent

# Register SnapshotEvent in _otcsdk_python:
_otcsdk_python.SnapshotEvent_swigregister(SnapshotEvent)
class SnapshotEventVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.SnapshotEventVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.SnapshotEventVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.SnapshotEventVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.SnapshotEventVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.SnapshotEventVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.SnapshotEventVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.SnapshotEventVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.SnapshotEventVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.SnapshotEventVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.SnapshotEventVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.SnapshotEventVector_pop(self)

    def append(self, x):
        return _otcsdk_python.SnapshotEventVector_append(self, x)

    def empty(self):
        return _otcsdk_python.SnapshotEventVector_empty(self)

    def size(self):
        return _otcsdk_python.SnapshotEventVector_size(self)

    def swap(self, v):
        return _otcsdk_python.SnapshotEventVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.SnapshotEventVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.SnapshotEventVector_rend(self)

    def clear(self):
        return _otcsdk_python.SnapshotEventVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.SnapshotEventVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.SnapshotEventVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.SnapshotEventVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.SnapshotEventVector_swiginit(self, _otcsdk_python.new_SnapshotEventVector(*args))

    def push_back(self, x):
        return _otcsdk_python.SnapshotEventVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.SnapshotEventVector_front(self)

    def back(self):
        return _otcsdk_python.SnapshotEventVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.SnapshotEventVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.SnapshotEventVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.SnapshotEventVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.SnapshotEventVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.SnapshotEventVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_SnapshotEventVector

# Register SnapshotEventVector in _otcsdk_python:
_otcsdk_python.SnapshotEventVector_swigregister(SnapshotEventVector)
class VersionInfo(object):
    r"""
    Encapsulates version and build information about the SDK.

    The version is represented in the format: major.minor.patch.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.VersionInfo_swiginit(self, _otcsdk_python.new_VersionInfo())

    def getVersionString(self):
        r"""
        Returns the SDK version as a string in the format: "major.minor.patch".

        :rtype: string
        :return: SDK version as string.
        """
        return _otcsdk_python.VersionInfo_getVersionString(self)

    def getMajorVersion(self):
        r"""
        Returns the major version of the SDK.

        :rtype: int
        :return: major version of the SDK.
        """
        return _otcsdk_python.VersionInfo_getMajorVersion(self)

    def getMinorVersion(self):
        r"""
        Returns the minor version of the SDK.

        :rtype: int
        :return: minor version of the SDK.
        """
        return _otcsdk_python.VersionInfo_getMinorVersion(self)

    def getPatchVersion(self):
        r"""
        Returns the patch version of the SDK.

        :rtype: int
        :return: patch version of the SDK.
        """
        return _otcsdk_python.VersionInfo_getPatchVersion(self)

    def compareVersion(self, major, minor, patch):
        r"""
        Compares the provided version with the one of the SDK.

        :rtype: int
        :return: 0  if both versions are equal.
                    -1 if the SDK version is less than the provided one.
                    +1 if the SDK version is greater than the provide one.
        """
        return _otcsdk_python.VersionInfo_compareVersion(self, major, minor, patch)

    def getBuildType(self):
        r"""
        Returns the build type of the SDK.

        :rtype: string
        :return: "Release" for release builds and "Debug" for debug builds.
        """
        return _otcsdk_python.VersionInfo_getBuildType(self)

    def getBuildDate(self):
        r"""
        Returns the UTC build date of the SDK in ISO format.

        :rtype: string
        :return: the UTC build date in ISO format.
        """
        return _otcsdk_python.VersionInfo_getBuildDate(self)

    def getCommitHash(self):
        r"""
        Returns the first part of the hash of the commit that was used to build the SDK.

        :rtype: string
        :return: first part of the hash of the commit that was used to build the SDK.
        """
        return _otcsdk_python.VersionInfo_getCommitHash(self)

    def getCommitDate(self):
        r"""
        Returns the date of the commit that was used to build the SDK in ISO format.

        :rtype: string
        :return: date of the commit that was used to build the SDK in ISO format
        """
        return _otcsdk_python.VersionInfo_getCommitDate(self)

    def getCommitBranch(self):
        r"""
        Returns the branch name used to build the SDK.

        :rtype: string
        :return: branch name used to build the SDK.
        """
        return _otcsdk_python.VersionInfo_getCommitBranch(self)

    def getName(self):
        r"""
        Returns the name of the SDK.

        :rtype: string
        :return: name of the SDK.
        """
        return _otcsdk_python.VersionInfo_getName(self)

    def getCompany(self):
        r"""
        Returns the name of the company that created the SDK.

        :rtype: string
        :return: name of the company that created the SDK.
        """
        return _otcsdk_python.VersionInfo_getCompany(self)

    def getCopyright(self):
        r"""
        Returns the copyright string of the SDK.

        :rtype: string
        :return: copyright string of the SDK.
        """
        return _otcsdk_python.VersionInfo_getCopyright(self)

    def getDescription(self):
        r"""
        Returns a description of the SDK.

        :rtype: string
        :return: description of the SDK.
        """
        return _otcsdk_python.VersionInfo_getDescription(self)

    def getBuildOS(self):
        r"""
        Returns the name of the operating system for which the SDK was build for.

        Examples: Windows, Linux.

        :rtype: string
        :return: name of the operating system for which the SDK was build for.
        """
        return _otcsdk_python.VersionInfo_getBuildOS(self)

    def getBuildPlatform(self):
        r"""
        Returns the name of the platform for which the SDK was build for.

        Examples: AMD64, ARM64.

        :rtype: string
        :return: name of the platform for which the SDK was build for.
        """
        return _otcsdk_python.VersionInfo_getBuildPlatform(self)
    __swig_destroy__ = _otcsdk_python.delete_VersionInfo

# Register VersionInfo in _otcsdk_python:
_otcsdk_python.VersionInfo_swigregister(VersionInfo)
class IpAddress(object):
    r"""
    Encapsulates an IP v4 address.

    IP address are stored in an array in the following oder:

    a.b.c.d => [0: a, 1: b, 2: c, 3: d]
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type address: int, in
        :param address: as an unsigned 32 bit integer in network byte order.

        |

        *Overload 3:*

        Constructor.

        :type address: string, in
        :param address: string in dot notation (a.b.c.d).

        :raises: SDKException if address string is invalid.

        |

        *Overload 4:*

        Constructor.

        :type a: std::uint8_t, in
        :param a: byte from an a.b.c.d IP address.
        :type b: std::uint8_t, in
        :param b: byte from an a.b.c.d IP address.
        :type c: std::uint8_t, in
        :param c: byte from an a.b.c.d IP address.
        :type d: std::uint8_t, in
        :param d: byte from an a.b.c.d IP address.
        """
        _otcsdk_python.IpAddress_swiginit(self, _otcsdk_python.new_IpAddress(*args))

    def reset(self):
        r""" Resets all the bytes of the address to 0.0.0.0."""
        return _otcsdk_python.IpAddress_reset(self)

    def setFromUInt32(self, address):
        r"""
        Sets the address from an unsigned 32 bit integer in network byte order.

        Notes: The network byte order is big-endian while many architectures like x64 or arm64 are little-endian.

        :type address: int, in
        :param address: as an unsigned 32 bit integer with the bytes in network order.
        """
        return _otcsdk_python.IpAddress_setFromUInt32(self, address)

    def toUInt32(self):
        r"""
        Returns the address as an unsigned 32 bit integer in network byte order.

        Notes: The network byte order is big-endian while many architectures like x64 or arm64 are little-endian.

        :rtype: int
        :return: address as an unsigned 32 bit integer in network byte order.
        """
        return _otcsdk_python.IpAddress_toUInt32(self)

    def setFromString(self, address):
        r"""
        Sets the address from a string in dot notation (a.b.c.d).

        :type address: string, in
        :param address: in dot notation.

        :raises: SDKException if the address string is invalid.
        """
        return _otcsdk_python.IpAddress_setFromString(self, address)

    def __str__(self):
        r"""
        Returns the address as a string in dot notation (a.b.c.d).

        :rtype: string
        :return: the address as a string in dot notation.
        """
        return _otcsdk_python.IpAddress___str__(self)

    def setByte(self, index, value):
        r"""
        Sets the value of the byte with the given index.

        :type index: int, in
        :param index: of the byte to set.
        :type value: std::uint8_t, in
        :param value: to set.

        :raises: SDKException if index is out of range.
        """
        return _otcsdk_python.IpAddress_setByte(self, index, value)

    def getByte(self, index):
        r"""
        Returns the value of the byte with the given index.

        :type index: int, in
        :param index: of the desired byte.

        :rtype: std::uint8_t
        :return: value of the byte with the given index.

        :raises: SDKException if the index is out of range.
        """
        return _otcsdk_python.IpAddress_getByte(self, index)
    __swig_destroy__ = _otcsdk_python.delete_IpAddress

# Register IpAddress in _otcsdk_python:
_otcsdk_python.IpAddress_swigregister(IpAddress)
class Port(object):
    r"""
    Encapsulates a network port number.

    Port number a usually separated by a : from an IP address like

     192.168.0.2:50101

    Here the port number is 50101.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*

        Constructor.

        The port number is set to 0.

        |

        *Overload 2:*

        Constructor.

        Native byte order is expected.

        :type number: int, in
        :param number: of the port in [0, 65535].

        |

        *Overload 3:*

        Sets the port number from the given string.

        :type port: string, in
        :param port: string.

        :raises: SDKException if the given string does not contain a valid port number.
        """
        _otcsdk_python.Port_swiginit(self, _otcsdk_python.new_Port(*args))

    def reset(self):
        r""" Resets the port number to 0."""
        return _otcsdk_python.Port_reset(self)

    def setNumber(self, number):
        r"""
        Sets the port number to the given value.

        Native byte order is expected.

        :type number: int, in
        :param number: port number to set.
        """
        return _otcsdk_python.Port_setNumber(self, number)

    def getNumber(self):
        r"""
        Returns the port number.

        Native byte order is used.

        :rtype: int
        :return: port number.
        """
        return _otcsdk_python.Port_getNumber(self)

    def setFromString(self, port):
        r"""
        Sets the port number from the given string.

        :type port: string, in
        :param port: number string.

        :raises: SDKException if the given string does not contain a valid port number.
        """
        return _otcsdk_python.Port_setFromString(self, port)

    def __str__(self):
        r"""
        Returns the port number as a string.

        :rtype: string
        :return: port number as a string.
        """
        return _otcsdk_python.Port___str__(self)
    __swig_destroy__ = _otcsdk_python.delete_Port

# Register Port in _otcsdk_python:
_otcsdk_python.Port_swigregister(Port)
class DeviceNetworkConfig(object):
    r""" Encapsulates the on device network configuration."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type deviceIp: :py:class:`IpAddress`, in
        :param deviceIp:        address.
        :type destinationIp: :py:class:`IpAddress`, in
        :param destinationIp:   address for the device to send data to.
        :type destinationPort: :py:class:`Port`, in
        :param destinationPort: for the device to send data to.
        :type subnetMask: :py:class:`IpAddress`, in
        :param subnetMask:      of the network.
        """
        _otcsdk_python.DeviceNetworkConfig_swiginit(self, _otcsdk_python.new_DeviceNetworkConfig(*args))

    def getDeviceIp(self):
        r"""
        Returns the IP address of the device.

        :rtype: :py:class:`IpAddress`
        :return: IP address of the device.
        """
        return _otcsdk_python.DeviceNetworkConfig_getDeviceIp(self)

    def getDestinationIp(self):
        r"""
        Returns the IP address to which the device sends its data to.

        :rtype: :py:class:`IpAddress`
        :return: IP address to which the device sends its data to.
        """
        return _otcsdk_python.DeviceNetworkConfig_getDestinationIp(self)

    def getDestinationPort(self):
        r"""
        Returns the port to which the device sends its data to.

        :rtype: :py:class:`Port`
        :return: port to which the device sends its data to.
        """
        return _otcsdk_python.DeviceNetworkConfig_getDestinationPort(self)

    def getSubnetMask(self):
        r"""
        Returns the subnet mask.

        :rtype: :py:class:`IpAddress`
        :return: subnet mask.
        """
        return _otcsdk_python.DeviceNetworkConfig_getSubnetMask(self)

    def setDeviceIp(self, address):
        r"""
        Sets the device IP address.

        :type address: :py:class:`IpAddress`, in
        :param address: to set.
        """
        return _otcsdk_python.DeviceNetworkConfig_setDeviceIp(self, address)

    def setDestinationIp(self, address):
        r"""
        Sets the destination IP address to which the device sends its data to.

        :type address: :py:class:`IpAddress`, in
        :param address: to set.
        """
        return _otcsdk_python.DeviceNetworkConfig_setDestinationIp(self, address)

    def setDestinationPort(self, port):
        r"""
        Sets the port to which the device sends its data to.

        :type port: :py:class:`Port`, in
        :param port: to set.
        """
        return _otcsdk_python.DeviceNetworkConfig_setDestinationPort(self, port)

    def setSubnetMask(self, subnetMask):
        r"""
        Sets the subnet mask.

        :type subnetMask: :py:class:`IpAddress`, in
        :param subnetMask: to set.
        """
        return _otcsdk_python.DeviceNetworkConfig_setSubnetMask(self, subnetMask)
    __swig_destroy__ = _otcsdk_python.delete_DeviceNetworkConfig

# Register DeviceNetworkConfig in _otcsdk_python:
_otcsdk_python.DeviceNetworkConfig_swigregister(DeviceNetworkConfig)
class DeviceInfo(object):
    r"""
    Holds important information about a device.

    Instances of this class are provided by the EnumerationManager and can be used to establish an connection
    through an IRImager implementation.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.DeviceInfo_swiginit(self, _otcsdk_python.new_DeviceInfo())

    @staticmethod
    def determineDeviceType(hardwareRevision, firmwareRevision):
        r"""
        Determines the device type based on the provided hardware and firmware revisions.

        :rtype: int
        :return: determined device type.
        """
        return _otcsdk_python.DeviceInfo_determineDeviceType(hardwareRevision, firmwareRevision)

    def setSerialNumber(self, serialNumber):
        r"""
        Sets the serial number of the device.

        :type serialNumber: int, in
        :param serialNumber: to set.
        """
        return _otcsdk_python.DeviceInfo_setSerialNumber(self, serialNumber)

    def getSerialNumber(self):
        r"""
        Returns the serial number of the device.

        :rtype: int
        :return: serial number of the device.
        """
        return _otcsdk_python.DeviceInfo_getSerialNumber(self)

    def setConnectionInterface(self, connectionInterface):
        r"""
        Sets the connection interface of the device.

        This can, for example, be USB or Ethernet.

        :type connectionInterface: string, in
        :param connectionInterface: to set.
        """
        return _otcsdk_python.DeviceInfo_setConnectionInterface(self, connectionInterface)

    def getConnectionInterface(self):
        r"""
        Returns the connection interface of the device.

        This can, for example, be USB or Ethernet.

        :rtype: string
        :return: connection interface of the device.
        """
        return _otcsdk_python.DeviceInfo_getConnectionInterface(self)

    def setIpAddress(self, ipAddress):
        r"""
        Sets the IP address.

        For Ethernet connections this refers to the IP address of the device.

        :type ipAddress: :py:class:`IpAddress`, in
        :param ipAddress: address to set.
        """
        return _otcsdk_python.DeviceInfo_setIpAddress(self, ipAddress)

    def getIpAddress(self):
        r"""
        Returns the IP address.

        For Ethernet connections this refers to the IP address of the device.

        :rtype: :py:class:`IpAddress`
        :return: IP address.
        """
        return _otcsdk_python.DeviceInfo_getIpAddress(self)

    def setPort(self, port):
        r"""
        Sets the port.

        For Ethernet connections this refers to the port the device will send its data to.

        :type port: :py:class:`Port`, in
        :param port: to set.
        """
        return _otcsdk_python.DeviceInfo_setPort(self, port)

    def getPort(self):
        r"""
        Returns the port.

        For Ethernet connections this refers to the port the device will send its data to.

        :rtype: :py:class:`Port`
        :return: port.
        """
        return _otcsdk_python.DeviceInfo_getPort(self)

    def getDeviceType(self):
        r"""
        Return the device type.

        :rtype: int
        :return: device type.
        """
        return _otcsdk_python.DeviceInfo_getDeviceType(self)

    def setRevisions(self, hardware, firmware):
        r"""
        Sets the hardware and firmware revisions.

        :type hardware: int, in
        :param hardware: revision to set.
        :type firmware: int, in
        :param firmware: revision to set.
        """
        return _otcsdk_python.DeviceInfo_setRevisions(self, hardware, firmware)

    def getHardwareRevision(self):
        r"""
        Returns the hardware revision.

        :rtype: int
        :return: hardware revision.
        """
        return _otcsdk_python.DeviceInfo_getHardwareRevision(self)

    def getFirmwareRevision(self):
        r"""
        Returns the firmware revision.

        :rtype: int
        :return: firmware revision.
        """
        return _otcsdk_python.DeviceInfo_getFirmwareRevision(self)

    def clone(self):
        r"""
        Returns a complete copy of this informatin.

        :rtype: :py:class:`DeviceInfo`
        :return: a complete copy of this information.
        """
        return _otcsdk_python.DeviceInfo_clone(self)
    __swig_destroy__ = _otcsdk_python.delete_DeviceInfo

# Register DeviceInfo in _otcsdk_python:
_otcsdk_python.DeviceInfo_swigregister(DeviceInfo)
class DeviceInfoVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.DeviceInfoVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.DeviceInfoVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.DeviceInfoVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.DeviceInfoVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.DeviceInfoVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.DeviceInfoVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.DeviceInfoVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.DeviceInfoVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.DeviceInfoVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.DeviceInfoVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.DeviceInfoVector_pop(self)

    def append(self, x):
        return _otcsdk_python.DeviceInfoVector_append(self, x)

    def empty(self):
        return _otcsdk_python.DeviceInfoVector_empty(self)

    def size(self):
        return _otcsdk_python.DeviceInfoVector_size(self)

    def swap(self, v):
        return _otcsdk_python.DeviceInfoVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.DeviceInfoVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.DeviceInfoVector_rend(self)

    def clear(self):
        return _otcsdk_python.DeviceInfoVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.DeviceInfoVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.DeviceInfoVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.DeviceInfoVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.DeviceInfoVector_swiginit(self, _otcsdk_python.new_DeviceInfoVector(*args))

    def push_back(self, x):
        return _otcsdk_python.DeviceInfoVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.DeviceInfoVector_front(self)

    def back(self):
        return _otcsdk_python.DeviceInfoVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.DeviceInfoVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.DeviceInfoVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.DeviceInfoVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.DeviceInfoVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.DeviceInfoVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_DeviceInfoVector

# Register DeviceInfoVector in _otcsdk_python:
_otcsdk_python.DeviceInfoVector_swigregister(DeviceInfoVector)
class EnumerationClient(object):
    r"""
    Defines the interface for classes that want to be updated about the detection of
           available devices.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor.

        |

        *Overload 2:*
        No copy constructor.
        """
        if self.__class__ == EnumerationClient:
            _self = None
        else:
            _self = self
        _otcsdk_python.EnumerationClient_swiginit(self, _otcsdk_python.new_EnumerationClient(_self, *args))
    __swig_destroy__ = _otcsdk_python.delete_EnumerationClient

    def onDeviceDetected(self, deviceInfo):
        r"""
        Callback function triggered when a new available device is detected.

        :type deviceInfo: :py:class:`DeviceInfo`, in
        :param deviceInfo: information of the device.
        """
        return _otcsdk_python.EnumerationClient_onDeviceDetected(self, deviceInfo)

    def onDeviceDetectionLost(self, deviceInfo):
        r"""
        Callback function triggered when a previously detected available device is no longer detected.

        :type deviceInfo: :py:class:`DeviceInfo`, in
        :param deviceInfo: information of the device.
        """
        return _otcsdk_python.EnumerationClient_onDeviceDetectionLost(self, deviceInfo)
    def __disown__(self):
        self.this.disown()
        _otcsdk_python.disown_EnumerationClient(self)
        return weakref.proxy(self)

# Register EnumerationClient in _otcsdk_python:
_otcsdk_python.EnumerationClient_swigregister(EnumerationClient)
class EnumerationManager(object):
    r"""
    Detects and monitors available devices.

    It detects devices that the SDK can potentially connect to.

    This class is implemented with the help of the Singleton design pattern. As a consequence, you have to use
    the EnumerationManager::getInstance() method to interact with it.

    Furthermore, allows the registration of observers aka. EnumerationClient that want be informed if the detection
    status of a device changes.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otcsdk_python.delete_EnumerationManager

    @staticmethod
    def getInstance():
        r"""
        Returns an instance of the EnumerationManager.

        Only one instance per program is available (Singleton).

        :rtype: :py:class:`EnumerationManager`
        :return: EnumerationManager instance.
        """
        return _otcsdk_python.EnumerationManager_getInstance()

    def getDetectedDevices(self, seconds=0):
        r"""
        Returns information about the currently detected devices.

        :type seconds: int, in, optional
        :param seconds:  <  0 the method waits indefintfly for the first detection pass to complete.
                                == 0 the method will not wait.
                                >  0 the method waits the given amount of seconds for th first detection pass
                                     to complete.

        :rtype: std::vector< optris::DeviceInfo,std::allocator< optris::DeviceInfo > >
        :return: a vector holding the current detected devices.
        """
        return _otcsdk_python.EnumerationManager_getDetectedDevices(self, seconds)

    def addClient(self, client):
        r"""
        Adds an observer/client that will be updated if a device detection status changes.

        :type client: :py:class:`EnumerationClient`, in
        :param client: callback client.
        """
        return _otcsdk_python.EnumerationManager_addClient(self, client)

    def removeClient(self, client):
        r"""
        Removes the given observer/client.

        :type client: :py:class:`EnumerationClient`, in
        :param client: to remove.
        """
        return _otcsdk_python.EnumerationManager_removeClient(self, client)

    def run(self):
        r"""
        Runs the connection event detection continuously.

        This method blocks until stopRunning() is called from a different thread or until the program
        terminates.

        See also: stopRunning()
        """
        return _otcsdk_python.EnumerationManager_run(self)

    def runAsync(self):
        r"""
        Runs the connection event detection continuously in a dedicated thread.

        This method runs until stopRunning() is called from a different thread or until the program
        terminates.

        Notes: All callback methods of a registered EnumerationClient are called from this detection thread.

        :rtype: boolean
        :return: true if the thread started within a second. False otherwise.

        See also: stopRunning()
        """
        return _otcsdk_python.EnumerationManager_runAsync(self)

    def stopRunning(self):
        r""" Stops the continuous connection event detection."""
        return _otcsdk_python.EnumerationManager_stopRunning(self)

    def isRunning(self):
        r"""
        Returns whether the connection event detection is running.

        :rtype: boolean
        :return: whether the connection event detection is running.
        """
        return _otcsdk_python.EnumerationManager_isRunning(self)

    def setDetectionPeriod(self, period):
        r"""
        Sets the minimum period in milliseconds for a single connection event detection run.

        :type period: int, in
        :param period: in milliseconds to set.
        """
        return _otcsdk_python.EnumerationManager_setDetectionPeriod(self, period)

    def getDetectionPeriod(self):
        r"""
        Returns the minimum period in milliseconds for a single connection event detection run.

        :rtype: int
        :return: minimum period in milliseconds for a single connection event detection run.
        """
        return _otcsdk_python.EnumerationManager_getDetectionPeriod(self)

# Register EnumerationManager in _otcsdk_python:
_otcsdk_python.EnumerationManager_swigregister(EnumerationManager)
FieldShape_Rectangle = _otcsdk_python.FieldShape_Rectangle
r""" Rectangular field."""
FieldMode_Minimum = _otcsdk_python.FieldMode_Minimum
r""" Minimum temperature in 째C."""
FieldMode_Maximum = _otcsdk_python.FieldMode_Maximum
r""" Maximum temperature in 째C."""
FieldMode_Mean = _otcsdk_python.FieldMode_Mean
r""" Mean temperature in 째C."""

def fieldShapeToString(shape):
    r"""
    Returns a string representation of the given field shape.

    Notes: Use `fieldShapeToString()` in Python instead.

    :type shape: int, in
    :param shape: for which a string representation is desired.

    :rtype: string
    :return: string representation of the given field shape.
    """
    return _otcsdk_python.fieldShapeToString(shape)

def fieldModeToString(fieldMode):
    r"""
    Returns a string representation of the given field mode.

    Notes: Use `fieldModeToString()` in Python instead.

    :type fieldMode: int, in
    :param fieldMode: for which a string representation is desired.

    :rtype: string
    :return: string representation of the given field mode.
    """
    return _otcsdk_python.fieldModeToString(fieldMode)
class MeasurementFieldConfig(object):
    r""" Encapsulates the configuration of a measurement field."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.MeasurementFieldConfig_swiginit(self, _otcsdk_python.new_MeasurementFieldConfig())

    def validate(self):
        r"""
        Validates the configuration settings.

        :raises: SDKException if the configuration contains invalid settings.
        """
        return _otcsdk_python.MeasurementFieldConfig_validate(self)
    name = property(_otcsdk_python.MeasurementFieldConfig_name_get, _otcsdk_python.MeasurementFieldConfig_name_set, doc=r""" Name of the measurement field.""")
    shape = property(_otcsdk_python.MeasurementFieldConfig_shape_get, _otcsdk_python.MeasurementFieldConfig_shape_set, doc=r""" Shape of the measurement field.""")
    mode = property(_otcsdk_python.MeasurementFieldConfig_mode_get, _otcsdk_python.MeasurementFieldConfig_mode_set, doc=r""" Mode for the measurement field.""")
    positionX = property(_otcsdk_python.MeasurementFieldConfig_positionX_get, _otcsdk_python.MeasurementFieldConfig_positionX_set, doc=r"""
    x position of the measurement field in pixels.

    Depending of the shape of the field this may refer to different things:
    - rectangle: Position of the upper left corner.
    """)
    positionY = property(_otcsdk_python.MeasurementFieldConfig_positionY_get, _otcsdk_python.MeasurementFieldConfig_positionY_set, doc=r"""
    y position of the measurement field in pixels.

    Depending of the shape of the field this may refer to different things:
    - rectangle: Position of the upper left corner.
    """)
    width = property(_otcsdk_python.MeasurementFieldConfig_width_get, _otcsdk_python.MeasurementFieldConfig_width_set, doc=r"""
    Width of the measurement field in pixels.

    Applicable for the following shapes:
    - rectangle
    """)
    height = property(_otcsdk_python.MeasurementFieldConfig_height_get, _otcsdk_python.MeasurementFieldConfig_height_set, doc=r"""
    Height of the measurement field in pixels.

    Applicable for the following shapes:
    - rectangle
    """)
    emissivity = property(_otcsdk_python.MeasurementFieldConfig_emissivity_get, _otcsdk_python.MeasurementFieldConfig_emissivity_set, doc=r"""
    Emissivity for the measurement field.

     Should be in [0.01, 1.1].
    """)
    transmissivity = property(_otcsdk_python.MeasurementFieldConfig_transmissivity_get, _otcsdk_python.MeasurementFieldConfig_transmissivity_set, doc=r"""
    Transmissivity for the measurement field.

     Should be in [0.01, 1.1].
    """)
    ambientTemperature = property(_otcsdk_python.MeasurementFieldConfig_ambientTemperature_get, _otcsdk_python.MeasurementFieldConfig_ambientTemperature_set, doc=r"""
    Ambient temperature in 째C for the measurement field.

    If set to INVALID_TEMPERATURE (-100) or less, the SDK will estimate the ambient
    temperature based on internal thermal probe readings.
    """)
    __swig_destroy__ = _otcsdk_python.delete_MeasurementFieldConfig

# Register MeasurementFieldConfig in _otcsdk_python:
_otcsdk_python.MeasurementFieldConfig_swigregister(MeasurementFieldConfig)
class MeasurementFieldConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.MeasurementFieldConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.MeasurementFieldConfigVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.MeasurementFieldConfigVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.MeasurementFieldConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.MeasurementFieldConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.MeasurementFieldConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.MeasurementFieldConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.MeasurementFieldConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.MeasurementFieldConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.MeasurementFieldConfigVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.MeasurementFieldConfigVector_pop(self)

    def append(self, x):
        return _otcsdk_python.MeasurementFieldConfigVector_append(self, x)

    def empty(self):
        return _otcsdk_python.MeasurementFieldConfigVector_empty(self)

    def size(self):
        return _otcsdk_python.MeasurementFieldConfigVector_size(self)

    def swap(self, v):
        return _otcsdk_python.MeasurementFieldConfigVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.MeasurementFieldConfigVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.MeasurementFieldConfigVector_rend(self)

    def clear(self):
        return _otcsdk_python.MeasurementFieldConfigVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.MeasurementFieldConfigVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.MeasurementFieldConfigVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.MeasurementFieldConfigVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.MeasurementFieldConfigVector_swiginit(self, _otcsdk_python.new_MeasurementFieldConfigVector(*args))

    def push_back(self, x):
        return _otcsdk_python.MeasurementFieldConfigVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.MeasurementFieldConfigVector_front(self)

    def back(self):
        return _otcsdk_python.MeasurementFieldConfigVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.MeasurementFieldConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.MeasurementFieldConfigVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.MeasurementFieldConfigVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.MeasurementFieldConfigVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.MeasurementFieldConfigVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_MeasurementFieldConfigVector

# Register MeasurementFieldConfigVector in _otcsdk_python:
_otcsdk_python.MeasurementFieldConfigVector_swigregister(MeasurementFieldConfigVector)
class ConstMeasurementFieldIterator(object):
    r""" Iterates over a measurement field in a row major fashion and grants read access."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, field):
        r"""
        Constructor.

        :type field: :py:class:`MeasurementField`, in
        :param field: measurement field to iterate over.
        """
        _otcsdk_python.ConstMeasurementFieldIterator_swiginit(self, _otcsdk_python.new_ConstMeasurementFieldIterator(field))

    def hasNext(self):
        r"""
        Returns whether there is a next measurement field value.

        :rtype: boolean
        :return: true if there is a next measurement field value. False otherwise.
        """
        return _otcsdk_python.ConstMeasurementFieldIterator_hasNext(self)

    def next(self):
        r""" Moves to the next measurement field value."""
        return _otcsdk_python.ConstMeasurementFieldIterator_next(self)

    def getValue(self):
        r"""
        Returns the current measurement field value.

        :rtype: int
        :return: current measurement field value.
        """
        return _otcsdk_python.ConstMeasurementFieldIterator_getValue(self)

    def getIndex(self):
        r"""
        Returns the index of the current measurement field value.

        :rtype: int
        :return: index of the current measurement field value.
        """
        return _otcsdk_python.ConstMeasurementFieldIterator_getIndex(self)

    def getX(self):
        r"""
        Returns the x-coordinate of the current measurement field value.

        :rtype: int
        :return: x-coordinate of the current measurement field value.
        """
        return _otcsdk_python.ConstMeasurementFieldIterator_getX(self)

    def getY(self):
        r"""
        Returns the y-coordinate of the current measurement field value.

        :rtype: int
        :return: y-coordinate of the current measurement field value.
        """
        return _otcsdk_python.ConstMeasurementFieldIterator_getY(self)
    __swig_destroy__ = _otcsdk_python.delete_ConstMeasurementFieldIterator

# Register ConstMeasurementFieldIterator in _otcsdk_python:
_otcsdk_python.ConstMeasurementFieldIterator_swigregister(ConstMeasurementFieldIterator)
class MeasurementField(object):
    r"""
    Rectangular measurement field with individual radiation parameters.

    Once added via the IRImager the setters will no loner affect the processing of the field because the IRImager creates an
    internal copy of the field.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type config: :py:class:`MeasurementFieldConfig`, in
        :param config:  to create a measurement field from.
        :type fieldId: int, in
        :param fieldId: uniquely identifying the measurement field.

        |

        *Overload 3:*
         Copy constructor.
        """
        _otcsdk_python.MeasurementField_swiginit(self, _otcsdk_python.new_MeasurementField(*args))
    __swig_destroy__ = _otcsdk_python.delete_MeasurementField

    def getConfig(self):
        r"""
        Returns the configuration of the measurement field.

        :rtype: :py:class:`MeasurementFieldConfig`
        :return: configuration of the measurement field.
        """
        return _otcsdk_python.MeasurementField_getConfig(self)

    def getId(self):
        r"""
        Returns the ID uniquely identifying the measurement field.

        :rtype: int
        :return: ID of the measurement field.
        """
        return _otcsdk_python.MeasurementField_getId(self)

    def getIndex(self):
        r"""
        Returns the index of the measurement field.

        :rtype: int
        :return: index of the measurement field.
        """
        return _otcsdk_python.MeasurementField_getIndex(self)

    def setIndex(self, index):
        r"""
        Sets the index of the measurement field.

        :type index: int, in
        :param index: to set.
        """
        return _otcsdk_python.MeasurementField_setIndex(self, index)

    def getName(self):
        r"""
        Returns the name of the measurement field.

        :rtype: string
        :return: name of the measurement field.
        """
        return _otcsdk_python.MeasurementField_getName(self)

    def setName(self, name):
        r"""
        Sets the name of the measurement field.

        :type name: string, in
        :param name: of the measurement field.
        """
        return _otcsdk_python.MeasurementField_setName(self, name)

    def getValue(self, *args):
        r"""
        *Overload 1:*

        Returns the field data value at the given index.

        :type index: int, in
        :param index: of the desired field data.

        :rtype: int
        :return: field data value at the given index.

        :raises: SDKException if the index is out of range.

        |

        *Overload 2:*

        Returns the field data value at the given coordinates.

        :type x: int, in
        :param x: coordinate.
        :type y: int, in
        :param y: coordinate.

        :rtype: int
        :return: field data value at the given coordinates.

        :raises: SDKException if the coordinates are out of range.
        """
        return _otcsdk_python.MeasurementField_getValue(self, *args)

    def getTemperature(self, *args):
        r"""
        *Overload 1:*

        Returns the temperature in in 째C at the given index.

        :type index: int, in
        :param index: of the desired field temperature.

        :rtype: float
        :return: temperature in in 째C at the given index.

        :raises: SDKException if index is out of range.

        |

        *Overload 2:*

        Returns the temperature in in 째C at the given coordinates.

        :type x: int, in
        :param x: coordinate.
        :type y: int, in
        :param y: coordinate.

        :rtype: float
        :return: temperature in in 째C at the given coordinate.

        :raises: SDKException if the coordinates are out of range.
        """
        return _otcsdk_python.MeasurementField_getTemperature(self, *args)

    def getConstIterator(self):
        r"""
        Returns an iterator with read access.

        The iterator traverses the measurement field in a row major fashion.

        :rtype: :py:class:`ConstMeasurementFieldIterator`
        :return: iterator with read access.
        """
        return _otcsdk_python.MeasurementField_getConstIterator(self)

    def getTemperaturePrecision(self):
        r"""
        Returns the precision of the temperatures stored in the measurement field.

        :rtype: int
        :return: precision of the temperatures stored in the measurement field.
        """
        return _otcsdk_python.MeasurementField_getTemperaturePrecision(self)

    def getX(self):
        r"""
        Returns the x-coordinate of the upper left corner.

        :rtype: int
        :return: x-coordinate of the upper left corner.
        """
        return _otcsdk_python.MeasurementField_getX(self)

    def getY(self):
        r"""
        Returns the y-coordinate of the upper left corner.

        :rtype: int
        :return: y-coordinate of the upper left corner.
        """
        return _otcsdk_python.MeasurementField_getY(self)

    def setPosition(self, x, y):
        r"""
        Sets the position of the measurement field  by providing the coordinates of the upper
               left corner.

        :type x: int, in
        :param x: coordinate of the upper left corner of the rectangular field.
        :type y: int, in
        :param y: coordinate of the upper left corner of the rectangular field.
        """
        return _otcsdk_python.MeasurementField_setPosition(self, x, y)

    def getShape(self):
        r"""
        Returns the shape of the measurement field.

        :rtype: int
        :return: shape of the measurement field.
        """
        return _otcsdk_python.MeasurementField_getShape(self)

    def getMode(self):
        r"""
        Returns the mode for the measurement field.

        :rtype: int
        :return: mode for the measurement field.
        """
        return _otcsdk_python.MeasurementField_getMode(self)

    def setMode(self, mode):
        r"""
        Sets the mode for the measurement field.

        :type mode: int, in
        :param mode: to set.
        """
        return _otcsdk_python.MeasurementField_setMode(self, mode)

    def getWidth(self):
        r"""
        Returns the width in pixels of the field.

        :rtype: int
        :return: width in pixels of the field.
        """
        return _otcsdk_python.MeasurementField_getWidth(self)

    def getHeight(self):
        r"""
        Returns the height in pixels of the field.

        :rtype: int
        :return: height in pixels of the field.
        """
        return _otcsdk_python.MeasurementField_getHeight(self)

    def getSize(self):
        r"""
        Returns the overall size of the field (width * height).

        :rtype: int
        :return: size of the field.
        """
        return _otcsdk_python.MeasurementField_getSize(self)

    def resize(self, width, height):
        r"""
        Resizes the measurement field.

        :type width: int, in
        :param width:  in pixels of the resized measurement field.
        :type height: int, in
        :param height: in pixels of the resized measurement field.
        """
        return _otcsdk_python.MeasurementField_resize(self, width, height)

    def getEmissivity(self):
        r"""
        Returns the emissivity of the field.

        :rtype: float
        :return: emissivity of the field.
        """
        return _otcsdk_python.MeasurementField_getEmissivity(self)

    def getTransmissivity(self):
        r"""
        Returns the transmissivity of the field.

        :rtype: float
        :return: transmissivity of the field.
        """
        return _otcsdk_python.MeasurementField_getTransmissivity(self)

    def getAmbientTemperature(self):
        r"""
        Returns the set ambient temperature in 째C.

        :rtype: float
        :return: ambient temperature in 째C. It will be equal or less to INVALID_TEMPERATURE if the
                    SDK is forced to estimate it.
        """
        return _otcsdk_python.MeasurementField_getAmbientTemperature(self)

    def setRadiationParameters(self, emissivity, transmissivity, ambientTemperature):
        r"""
        Sets the radiation parameters stored in the measurement field.

        :type emissivity: float, in
        :param emissivity:         for the measurement field. Should be in [0, 1].
        :type transmissivity: float, in
        :param transmissivity:     for the measurement field. Should be in [0, 1].
        :type ambientTemperature: float, in
        :param ambientTemperature: in 째C. Set to INVALID_TEMPERATURE or less to force the SDK to estimate the
                                          ambient temperature based on internal probe readings.

        :raises: SDKException if emissivity or transmissivity is not in [0, 1].
        """
        return _otcsdk_python.MeasurementField_setRadiationParameters(self, emissivity, transmissivity, ambientTemperature)

    def getMeanTemperature(self):
        r"""
        Returns the overall mean temperature of the field in 째C.

        :rtype: float
        :return: overall mean temperature of the field in 째C.
        """
        return _otcsdk_python.MeasurementField_getMeanTemperature(self)

    def getMinTemperature(self):
        r"""
        Returns the minimum temperature in the field in 째C.

        :rtype: float
        :return: minimum temperature in the field in 째C.
        """
        return _otcsdk_python.MeasurementField_getMinTemperature(self)

    def getMaxTemperature(self):
        r"""
        Returns the maximum temperature in the field in 째C.

        :rtype: float
        :return: maximum temperature in the field in 째C.
        """
        return _otcsdk_python.MeasurementField_getMaxTemperature(self)

    def getDataPoint(self):
        r"""
        Returns the data point specified by the the mode of this field.

        :rtype: float
        :return: data point  specified by the the mode of this field.
        """
        return _otcsdk_python.MeasurementField_getDataPoint(self)

    def setTemperatures(self, mean, min, max):
        r"""
        Sets the mean, minimum and maximum temperatures in 째C.

        :type mean: float, in
        :param mean: temperature in 째C.
        :type min: float, in
        :param min:  temperature in 째C.
        :type max: float, in
        :param max:  temperature in 째C.
        """
        return _otcsdk_python.MeasurementField_setTemperatures(self, mean, min, max)

    def getConverter(self):
        r"""
        Returns the temperature converter.

        It can be used to convert and validate the thermal frame values to and from temperatures in 째C.

        :rtype: :py:class:`TemperatureConverter`
        :return: temperature converter.
        """
        return _otcsdk_python.MeasurementField_getConverter(self)

    def clone(self):
        r"""
        Returns a complete copy of this frame.

        :rtype: :py:class:`MeasurementField`
        :return: a complete copy of this frame.
        """
        return _otcsdk_python.MeasurementField_clone(self)

    def copyTemperaturesTo(self, destination):
        r"""
        Copies the thermal data as degree Celsius to a one-dimensional array or vector.

        Warning: Make sure the destination has at least the size returned by getSize().

        :type destination: float, out
        :param destination: to copy the internal data to.
        :type size: int, in
        :param size:        as element count. The specified size is limited to [0, getSize()].
        """
        return _otcsdk_python.MeasurementField_copyTemperaturesTo(self, destination)

    def copyDataTo(self, destination):
        r"""
        Copies the internal values to a one-dimensional array or vector.

        Warning: Make sure the destination has at least the size returned by getSize().

        :type destination: int, out
        :param destination: to copy the internal data to.
        :type size: int, in
        :param size:        as element count. The specified size is limited to [0, getSize()].
        """
        return _otcsdk_python.MeasurementField_copyDataTo(self, destination)

# Register MeasurementField in _otcsdk_python:
_otcsdk_python.MeasurementField_swigregister(MeasurementField)
PifDeviceType_Automatic = _otcsdk_python.PifDeviceType_Automatic
r""" Use the PIF type reported by the camera firmware."""
PifDeviceType__None = _otcsdk_python.PifDeviceType__None
r""" No PIF."""
PifDeviceType_Standard = _otcsdk_python.PifDeviceType_Standard
r""" Standard PIF."""
PifDeviceType_IndustrialMV = _otcsdk_python.PifDeviceType_IndustrialMV
r""" Industrial PIF with voltage based analog outputs."""
PifDeviceType_IndustrialMA = _otcsdk_python.PifDeviceType_IndustrialMA
r""" Industrial PIF with current based analog outputs."""
PifDeviceType_Internal = _otcsdk_python.PifDeviceType_Internal
r""" Internal PIF."""
PifDeviceType_Stackable = _otcsdk_python.PifDeviceType_Stackable
r""" Stackable PIF."""
PifDeviceType_TemperatureProbe = _otcsdk_python.PifDeviceType_TemperatureProbe
r""" Instead of a PIF an external temperature probe is used."""
PifDeviceType_Proprietary = _otcsdk_python.PifDeviceType_Proprietary
r""" The pins of the PIF connector on the camera are used directly."""
PifAiMode_Off = _otcsdk_python.PifAiMode_Off
r""" Off."""
PifAiMode_FlagControl = _otcsdk_python.PifAiMode_FlagControl
r""" The shutter flag is controlled by the input voltage."""
PifAiMode_Emissivity = _otcsdk_python.PifAiMode_Emissivity
r""" Emissivity for the thermal frame is derived from the input voltage."""
PifAiMode_AmbientTemperature = _otcsdk_python.PifAiMode_AmbientTemperature
r""" Ambient temperature for the thermal frame is derived from the input voltage."""
PifAiMode_UncommittedValue = _otcsdk_python.PifAiMode_UncommittedValue
r""" The input voltage value is transformed and provided to IRImagerClients via a callback."""
PifDiMode_Off = _otcsdk_python.PifDiMode_Off
r""" Off."""
PifDiMode_FlagControl = _otcsdk_python.PifDiMode_FlagControl
r""" The flag is controlled by the input signal."""
PifAoMode_Off = _otcsdk_python.PifAoMode_Off
r""" Off."""
PifAoMode_FlagStatus = _otcsdk_python.PifAoMode_FlagStatus
r""" The status of the shutter flag is output."""
PifAoMode_FrameSync = _otcsdk_python.PifAoMode_FrameSync
r""" Every time a new frame is capture a pulse is output."""
PifAoMode_FailSafe = _otcsdk_python.PifAoMode_FailSafe
r""" A heart beat signal is provided that indicates whether the camera and SDK are working correctly."""
PifAoMode_ExternalCommunication = _otcsdk_python.PifAoMode_ExternalCommunication
r""" The output value can be controlled by clients of the SDK."""
PifAoMode_MeasurementField = _otcsdk_python.PifAoMode_MeasurementField
r""" The set data point of a measurement field is output."""
PifAoMode_InternalTemperature = _otcsdk_python.PifAoMode_InternalTemperature
r""" The internal camera temperature is output."""
PifDoMode_Off = _otcsdk_python.PifDoMode_Off
r""" Off."""
PifDoMode_FlagStatus = _otcsdk_python.PifDoMode_FlagStatus
r""" The status of the shutter flag is output."""
PifDoMode_FrameSync = _otcsdk_python.PifDoMode_FrameSync
r""" Every time a new frame is capture a high pulse is output."""
PifDoMode_FailSafe = _otcsdk_python.PifDoMode_FailSafe
r""" A heart beat signal is provided that indicates whether the camera and SDK are working correctly."""
PifDoMode_ExternalCommunication = _otcsdk_python.PifDoMode_ExternalCommunication
r""" The output value can be controlled by clients of the SDK."""
PifFsMode_Off = _otcsdk_python.PifFsMode_Off
r""" Off."""
PifFsMode_On = _otcsdk_python.PifFsMode_On
r""" On."""
PifAoOutputMode__0_20mA = _otcsdk_python.PifAoOutputMode__0_20mA
r""" 0 mA - 20 mA"""
PifAoOutputMode__4_20mA = _otcsdk_python.PifAoOutputMode__4_20mA
r""" 4 mA - 20 mA"""
PifAoOutputMode__0_10V = _otcsdk_python.PifAoOutputMode__0_10V
r""" 0 V - 10 V"""

def lowerLimit(outputMode):
    r"""
    Returns the lower limit of the specified PIF analog output mode as a number value.

    :type outputMode: int, in
    :param outputMode: for which the lower limit is desired.

    :rtype: float
    :return: lower limit of the specified PIF analog output mode as a number value.
    """
    return _otcsdk_python.lowerLimit(outputMode)

def upperLimit(outputMode):
    r"""
    Returns the upper limit of the specified PIF analog output mode as a number value.

    :type outputMode: int, in
    :param outputMode: for which the upper limit is desired.

    :rtype: float
    :return: upper limit of the specified PIF analog output mode as a number value.
    """
    return _otcsdk_python.upperLimit(outputMode)

def clampValue(value, outputMode):
    r"""
    Clamps the given value to the limits of the specified PIF analog output mode.

    :type value: float, in
    :param value:      to clamp.
    :type outputMode: int, in
    :param outputMode: to which the provided value should be clamped.

    :rtype: float
    :return: the given value to the limits of the specified PIF analog output mode.
    """
    return _otcsdk_python.clampValue(value, outputMode)

def pifDeviceTypeToString(type):
    r"""
    Returns a string representation of the given PIF device type.

    Notes: Use `pifDeviceTypeToString()` in Python instead.

    :type type: int, in
    :param type: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given PIF device type.
    """
    return _otcsdk_python.pifDeviceTypeToString(type)

def pifAiModeToString(analogInputMode):
    r"""
    Returns a string representation of the given PIF analog input mode.

    Notes: Use `pifAiModeToString()` in Python instead.

    :type analogInputMode: int, in
    :param analogInputMode: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given PIF analog input mode.
    """
    return _otcsdk_python.pifAiModeToString(analogInputMode)

def pifDiModeToString(digitalInputMode):
    r"""
    Returns a string representation of the given PIF digital input mode.

    Notes: Use `pifDiModeToString()` in Python instead.

    :type digitalInputMode: int, in
    :param digitalInputMode: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given PIF digital input mode.
    """
    return _otcsdk_python.pifDiModeToString(digitalInputMode)

def pifAoModeToString(analogOutputMode):
    r"""
    Returns a string representation of the given PIF analog output mode.

    Notes: Use `pifAoModeToString()` in Python instead.

    :type analogOutputMode: int, in
    :param analogOutputMode: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given PIF analog output mode.
    """
    return _otcsdk_python.pifAoModeToString(analogOutputMode)

def pifDoModeToString(digitalOutputMode):
    r"""
    Returns a string representation of the given PIF digital output mode.

    Notes: Use `pifDoModeToString()` in Python instead.

    :type digitalOutputMode: int, in
    :param digitalOutputMode: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given PIF digital output mode.
    """
    return _otcsdk_python.pifDoModeToString(digitalOutputMode)

def pifFsModeToString(failSafeMode):
    r"""
    Returns a string representation of the given PIF fail safe mode.

    Notes: Use `pifFsModeToString()` in Python instead.

    :type failSafeMode: int, in
    :param failSafeMode: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given PIF fail safe mode.
    """
    return _otcsdk_python.pifFsModeToString(failSafeMode)

def pifAoOutputModeToString(outputMode):
    r"""
    Returns a string representation of the given PIF analog output mode.

    Notes: Use `pifAoOutputModeToString()` in Python instead.

    :type outputMode: int, in
    :param outputMode: for which a string representation is desired.

    :rtype: string
    :return: string respresentation of the given PIF analog output mode.
    """
    return _otcsdk_python.pifAoOutputModeToString(outputMode)
class PifAiConfig(object):
    r"""
    Encapsulates the configuration for a PIF analog input channel.

    For a detailed overview of all available modes and parameters please refer to the corresponding section in the documentation
    of the [configuration file](#important-files-configuration-process-interface-analog-inputs).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.PifAiConfig_swiginit(self, _otcsdk_python.new_PifAiConfig())

    @staticmethod
    def createOff(deviceIndex, pinIndex):
        r"""
        Creates a configuration for the mode PifAiMode::Off.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifAiConfig`
        :return: configuration for the mode PifAiMode::Off.
        """
        return _otcsdk_python.PifAiConfig_createOff(deviceIndex, pinIndex)

    @staticmethod
    def createAmbientTemperature(deviceIndex, pinIndex, gain, offset):
        r"""
        Creates a configuration for the mode PifAiMode::AmbientTemperature.

        The input voltage U_in is converted to the ambient temperature t_ambient as follows:

        `t_ambient = (U_in - offset) / gain`

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type gain: float, in
        :param gain:        for converting the input voltage into the ambient temperature.
        :type offset: float, in
        :param offset:      for converting the input voltage into the ambient temperature.

        :rtype: :py:class:`PifAiConfig`
        :return: configuration for the mode PifAiMode::AmbientTemperature.
        """
        return _otcsdk_python.PifAiConfig_createAmbientTemperature(deviceIndex, pinIndex, gain, offset)

    @staticmethod
    def createEmissivity(deviceIndex, pinIndex, gain, offset):
        r"""
        Creates a configuration for the mode PifAiMode::Emissivity.

        The input voltage U_in is converted to the emissivity e as follows:

        `e = (U_in - offset) / gain`

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type gain: float, in
        :param gain:        for converting the input voltage into the emissivity.
        :type offset: float, in
        :param offset:      for converting the input voltage into the emissivity.

        :rtype: :py:class:`PifAiConfig`
        :return: configuration for the mode PifAiMode::Emissivity.
        """
        return _otcsdk_python.PifAiConfig_createEmissivity(deviceIndex, pinIndex, gain, offset)

    @staticmethod
    def createFlagControl(deviceIndex, pinIndex, threshold, openIfLow):
        r"""
        Creates a configuration for the mode PifAiMode::FlagControl.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type threshold: float, in
        :param threshold:   voltage level.
        :type openIfLow: boolean, in
        :param openIfLow:   if true, the shutter flag will be opened, if the input voltage is lower than the threshold.

        :rtype: :py:class:`PifAiConfig`
        :return: configuration for the mode PifAiMode::FlagControl.
        """
        return _otcsdk_python.PifAiConfig_createFlagControl(deviceIndex, pinIndex, threshold, openIfLow)

    @staticmethod
    def createUncommittedValue(deviceIndex, pinIndex, name, unit, gain, offset):
        r"""
        Creates a configuration for the mode PifAiMode::UncommittedValue.

        The input voltage U_in is converted to the uncommitted value x as follows:

        `x = (U_in - offset) / gain`

        When ever U_in changes the SDK will trigger the callback IRImagerClient::onPifUncommittedValue().

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type name: string, in
        :param name:        of the uncommitted value.
        :type unit: string, in
        :param unit:        of the uncommitted value.
        :type gain: float, in
        :param gain:        for converting the input voltage into the emissivity.
        :type offset: float, in
        :param offset:      for converting the input voltage into the emissivity.

        :rtype: :py:class:`PifAiConfig`
        :return: configuration for the mode PifAiMode::UncommittedValue.
        """
        return _otcsdk_python.PifAiConfig_createUncommittedValue(deviceIndex, pinIndex, name, unit, gain, offset)
    deviceIndex = property(_otcsdk_python.PifAiConfig_deviceIndex_get, _otcsdk_python.PifAiConfig_deviceIndex_set, doc=r""" Identifies the channel by specifying the PIF device on which its pins are located.""")
    pinIndex = property(_otcsdk_python.PifAiConfig_pinIndex_get, _otcsdk_python.PifAiConfig_pinIndex_set, doc=r""" Identifies the channel by locating its pins on the specified PIF device.""")
    mode = property(_otcsdk_python.PifAiConfig_mode_get, _otcsdk_python.PifAiConfig_mode_set, doc=r""" Mode to be applied to the channel.""")
    slope = property(_otcsdk_python.PifAiConfig_slope_get, _otcsdk_python.PifAiConfig_slope_set, doc=r""" Defines how input voltages are converted into the desired target values.""")
    triggerThreshold = property(_otcsdk_python.PifAiConfig_triggerThreshold_get, _otcsdk_python.PifAiConfig_triggerThreshold_set, doc=r""" Trigger threshold for the input voltage.""")
    triggerLowActive = property(_otcsdk_python.PifAiConfig_triggerLowActive_get, _otcsdk_python.PifAiConfig_triggerLowActive_set, doc=r""" Indicates whether the trigger will be pulled if the input voltage is below or above the threshold.""")
    uncommittedValueName = property(_otcsdk_python.PifAiConfig_uncommittedValueName_get, _otcsdk_python.PifAiConfig_uncommittedValueName_set, doc=r""" Name of the uncommitted value.""")
    uncommittedValueUnit = property(_otcsdk_python.PifAiConfig_uncommittedValueUnit_get, _otcsdk_python.PifAiConfig_uncommittedValueUnit_set, doc=r""" Unit of the uncommitted value.""")
    __swig_destroy__ = _otcsdk_python.delete_PifAiConfig

# Register PifAiConfig in _otcsdk_python:
_otcsdk_python.PifAiConfig_swigregister(PifAiConfig)
class PifDiConfig(object):
    r"""
    Encapsulates the configuration for a PIF digital input channel.

    For a detailed overview of all available modes and parameters please refer to the corresponding section in the documentation
    of the [configuration file](#important-files-configuration-process-interface-digital-inputs).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.PifDiConfig_swiginit(self, _otcsdk_python.new_PifDiConfig())

    @staticmethod
    def createOff(deviceIndex, pinIndex):
        r"""
        Creates a configuration for the mode PifDiMode::Off.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifDiConfig`
        :return: configuration for the mode PifDiMode::Off.
        """
        return _otcsdk_python.PifDiConfig_createOff(deviceIndex, pinIndex)

    @staticmethod
    def createFlagControl(deviceIndex, pinIndex, openIfLow):
        r"""
        Create a configuration for the mode PifDiMode::FlagControl.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type openIfLow: boolean, in
        :param openIfLow:   if true, the shutter flag will be opend, if the input signal is low.

        :rtype: :py:class:`PifDiConfig`
        :return: configuration for the mode PifDiMode::FlagControl.
        """
        return _otcsdk_python.PifDiConfig_createFlagControl(deviceIndex, pinIndex, openIfLow)
    deviceIndex = property(_otcsdk_python.PifDiConfig_deviceIndex_get, _otcsdk_python.PifDiConfig_deviceIndex_set, doc=r""" Identifies the channel by specifying the PIF device on which its pins are located.""")
    pinIndex = property(_otcsdk_python.PifDiConfig_pinIndex_get, _otcsdk_python.PifDiConfig_pinIndex_set, doc=r""" Identifies the channel by locating its pins on the specified PIF device.""")
    mode = property(_otcsdk_python.PifDiConfig_mode_get, _otcsdk_python.PifDiConfig_mode_set, doc=r""" Mode to be applied to the channel.""")
    triggerLowActive = property(_otcsdk_python.PifDiConfig_triggerLowActive_get, _otcsdk_python.PifDiConfig_triggerLowActive_set, doc=r""" Indicates whether the trigger will be pulled if the input signal is low.""")
    __swig_destroy__ = _otcsdk_python.delete_PifDiConfig

# Register PifDiConfig in _otcsdk_python:
_otcsdk_python.PifDiConfig_swigregister(PifDiConfig)
class PifAoConfig(object):
    r"""
    Encapsulates the configuration for a PIF analog output channel.

    For a detailed overview of all available modes and parameters please refer to the corresponding section in the documentation
    of the [configuration file](#important-files-configuration-process-interface-analog-outputs).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.PifAoConfig_swiginit(self, _otcsdk_python.new_PifAoConfig())

    @staticmethod
    def createOff(deviceIndex, pinIndex):
        r"""
        Creates a configuration for the mode PifAoMode::Off.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifAoConfig`
        :return: configuration for the mode PifAoMode::Off.
        """
        return _otcsdk_python.PifAoConfig_createOff(deviceIndex, pinIndex)

    @staticmethod
    def createExternalCommunication(deviceIndex, pinIndex, outputMode):
        r"""
        Creates a configuration for the mode PifAoMode::ExternalCommunication.

        When set to external communication the output value of the channel can be set with ProcessInterface::setAoValue().

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type outputMode: int, in
        :param outputMode:  to apply.

        :rtype: :py:class:`PifAoConfig`
        :return: configuration for the mode PifAoMode::ExternalCommunication.
        """
        return _otcsdk_python.PifAoConfig_createExternalCommunication(deviceIndex, pinIndex, outputMode)

    @staticmethod
    def createFlagStatus(deviceIndex, pinIndex, outputMode, open, moving, closed):
        r"""
        Creates a configuration for the mode PifAoMode::FlagStatus.

        The values for open, moving and closed are automatically clipped to the specified output mode limits.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type outputMode: int, in
        :param outputMode:  to apply.
        :type open: float, in
        :param open:        value to output if the shutter flag is open.
        :type moving: float, in
        :param moving:      value to output if the shutter flag is moving.
        :type closed: float, in
        :param closed:      value to output if the shutter flag is closed.

        :rtype: :py:class:`PifAoConfig`
        :return: configuration for the mode PifAoMode::FlagStatus.
        """
        return _otcsdk_python.PifAoConfig_createFlagStatus(deviceIndex, pinIndex, outputMode, open, moving, closed)

    @staticmethod
    def createFrameSync(deviceIndex, pinIndex, outputMode, pulse):
        r"""
        Creates a configuration for the mode PifAoMode::FrameSync.

        The value for pulse will automatically be clipped to the specified output mode limits.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type outputMode: int, in
        :param outputMode:  to apply.
        :type pulse: float, in
        :param pulse:       height of the generated pulse indicating an newly captured frame.

        :rtype: :py:class:`PifAoConfig`
        :return: configuration for the mode PifAoMode::FrameSync.
        """
        return _otcsdk_python.PifAoConfig_createFrameSync(deviceIndex, pinIndex, outputMode, pulse)

    @staticmethod
    def createInternalTemperature(deviceIndex, pinIndex, outputMode, gain, offset):
        r"""
        Creates a configuration for the mode PifAoMode::InternalTemperature.

        The internal temperature t_internal is converted into an output value X_out as follows:

        `X_out = gain * t_internal + offset`

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type outputMode: int, in
        :param outputMode:  to apply.
        :type gain: float, in
        :param gain:        for converting the internal temperature into an output value.
        :type offset: float, in
        :param offset:      for converting the internal temperature into an output value.

        :rtype: :py:class:`PifAoConfig`
        :return: configuration for the mode PifAoMode::InternalTemperature.
        """
        return _otcsdk_python.PifAoConfig_createInternalTemperature(deviceIndex, pinIndex, outputMode, gain, offset)

    @staticmethod
    def createMeasurementField(deviceIndex, pinIndex, outputMode, fieldIndex, gain, offset):
        r"""
        Creates a configuration for the mode PifAoMode::MeasurementField.

        The data point of the measurement field that will be output is given by the value of the MeasurementFieldConfig::mode
        and can be accessed through MeasurementField::getDataPoint(). Its value x_field is converted into an output value X_out
        as follows:

        `X_out = gain * x_field + offset`

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type outputMode: int, in
        :param outputMode:  to apply.
        :type fieldIndex: int, in
        :param fieldIndex:  identifying the measurement field. It start at 0 and increments with every measurement field that is added.
                                   The method IRImager::addMeasurementField() will return the index of the added field.
        :type gain: float, in
        :param gain:        for converting the measurement field data point into an output value.
        :type offset: float, in
        :param offset:      for converting the measurement field data point into an output value.

        :rtype: :py:class:`PifAoConfig`
        :return: configuration for the mode PifAoMode::MeasurementField.
        """
        return _otcsdk_python.PifAoConfig_createMeasurementField(deviceIndex, pinIndex, outputMode, fieldIndex, gain, offset)

    @staticmethod
    def createFailSafe(deviceIndex, pinIndex, outputMode, pulse):
        r"""
        Creates a configuration for the mode PifAoMode::FailSafe.

        Refer to the [Fail Safe](#fail-safe) chapter for more details.

        The value for pulse will automatically be clipped to the specified output mode limits.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type outputMode: int, in
        :param outputMode:  to apply.
        :type pulse: float, in
        :param pulse:       height of the output heart beat signal.

        :rtype: :py:class:`PifAoConfig`
        :return: configuration for the mode PifAoMode::FailSafe.
        """
        return _otcsdk_python.PifAoConfig_createFailSafe(deviceIndex, pinIndex, outputMode, pulse)
    deviceIndex = property(_otcsdk_python.PifAoConfig_deviceIndex_get, _otcsdk_python.PifAoConfig_deviceIndex_set, doc=r""" Identifies the channel by specifying the PIF device on which its pins are located.""")
    pinIndex = property(_otcsdk_python.PifAoConfig_pinIndex_get, _otcsdk_python.PifAoConfig_pinIndex_set, doc=r""" Identifies the channel by locating its pins on the specified PIF device.""")
    mode = property(_otcsdk_python.PifAoConfig_mode_get, _otcsdk_python.PifAoConfig_mode_set, doc=r""" Mode to be applied to the channel.""")
    outputMode = property(_otcsdk_python.PifAoConfig_outputMode_get, _otcsdk_python.PifAoConfig_outputMode_set, doc=r""" Output mode to be applied to the channel.""")
    slope = property(_otcsdk_python.PifAoConfig_slope_get, _otcsdk_python.PifAoConfig_slope_set, doc=r""" Defines how data points are converted into output values.""")
    fieldIndex = property(_otcsdk_python.PifAoConfig_fieldIndex_get, _otcsdk_python.PifAoConfig_fieldIndex_set, doc=r""" Identifies the measurement field by its index.""")
    outputActive = property(_otcsdk_python.PifAoConfig_outputActive_get, _otcsdk_python.PifAoConfig_outputActive_set, doc=r""" Output value for an active event/state.""")
    outputIntermediate = property(_otcsdk_python.PifAoConfig_outputIntermediate_get, _otcsdk_python.PifAoConfig_outputIntermediate_set, doc=r""" Output value for an intermediate event/state.""")
    outputInactive = property(_otcsdk_python.PifAoConfig_outputInactive_get, _otcsdk_python.PifAoConfig_outputInactive_set, doc=r""" Output value for an inactive event/state.""")
    __swig_destroy__ = _otcsdk_python.delete_PifAoConfig

# Register PifAoConfig in _otcsdk_python:
_otcsdk_python.PifAoConfig_swigregister(PifAoConfig)
class PifDoConfig(object):
    r"""
    Encapsulates the configuration for a PIF digital output channel.

    For a detailed overview of all available modes and parameters please refer to the corresponding section in the documentation
    of the [configuration file](#important-files-configuration-process-interface-digital-outputs).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.PifDoConfig_swiginit(self, _otcsdk_python.new_PifDoConfig())

    @staticmethod
    def createOff(deviceIndex, pinIndex):
        r"""
        Creates a configuration for the mode PifDoMode::Off.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifDoConfig`
        :return: configuration for the mode PifDoMode::Off.
        """
        return _otcsdk_python.PifDoConfig_createOff(deviceIndex, pinIndex)

    @staticmethod
    def createFlagStatus(deviceIndex, pinIndex, lowIfOpen):
        r"""
        Creates a configuration for the mode PifDoMode::FlagStatus.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type lowIfOpen: boolean, in
        :param lowIfOpen:   if true, a low signal will be output, if the flag is open.

        :rtype: :py:class:`PifDoConfig`
        :return: configuration for the mode PifDoMode::FlagStatus.
        """
        return _otcsdk_python.PifDoConfig_createFlagStatus(deviceIndex, pinIndex, lowIfOpen)

    @staticmethod
    def createFrameSync(deviceIndex, pinIndex):
        r"""
        Create a configuration for the mode PifDoMode::FrameSync.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifDoConfig`
        :return: configuration for the mode PifDoMode::FrameSync.
        """
        return _otcsdk_python.PifDoConfig_createFrameSync(deviceIndex, pinIndex)

    @staticmethod
    def createExternalCommunication(deviceIndex, pinIndex):
        r"""
        Creates a configuration for the mode PifDoMode::ExternalCommunication.

        When set to external communication the output value of the channel can be set with ProcessInterface::setDoValue().

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifDoConfig`
        :return: configuration for the mode PifDoMode::ExternalCommunication.
        """
        return _otcsdk_python.PifDoConfig_createExternalCommunication(deviceIndex, pinIndex)

    @staticmethod
    def createFailSafe(deviceIndex, pinIndex):
        r"""
        Creates a configuration for the mode PifDoMode::FailSafe.

        Refer to the [Fail Safe](#fail-safe) chapter for more details.

        This mode is __unique__ and can only be applied once for __all__ channels.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifDoConfig`
        :return: configuration for the mode PifDoMode::FailSafe.
        """
        return _otcsdk_python.PifDoConfig_createFailSafe(deviceIndex, pinIndex)
    deviceIndex = property(_otcsdk_python.PifDoConfig_deviceIndex_get, _otcsdk_python.PifDoConfig_deviceIndex_set, doc=r""" Identifies the channel by specifying the PIF device on which its pins are located.""")
    pinIndex = property(_otcsdk_python.PifDoConfig_pinIndex_get, _otcsdk_python.PifDoConfig_pinIndex_set, doc=r""" Identifies the channel by locating its pins on the specified PIF device.""")
    mode = property(_otcsdk_python.PifDoConfig_mode_get, _otcsdk_python.PifDoConfig_mode_set, doc=r""" Mode to be applied to the channel.""")
    outputLowActive = property(_otcsdk_python.PifDoConfig_outputLowActive_get, _otcsdk_python.PifDoConfig_outputLowActive_set, doc=r""" Indicates if the output is low active.""")
    __swig_destroy__ = _otcsdk_python.delete_PifDoConfig

# Register PifDoConfig in _otcsdk_python:
_otcsdk_python.PifDoConfig_swigregister(PifDoConfig)
class PifFsConfig(object):
    r"""
    Encapsulates the configuration for a PIF fail safe channel.

    For a detailed overview of all available modes and parameters please refer to the corresponding section in the documentation
    of the [configuration file](#important-files-configuration-process-interface-fail-safe).
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.PifFsConfig_swiginit(self, _otcsdk_python.new_PifFsConfig())

    @staticmethod
    def createOff():
        r"""
        Creates a configuration for the PifFsMode::Off.

        :rtype: :py:class:`PifFsConfig`
        :return: configuration for the PifFsMode::Off.
        """
        return _otcsdk_python.PifFsConfig_createOff()

    @staticmethod
    def createOn():
        r"""
        Creates a configuration for the PifFsMode::On.

        :rtype: :py:class:`PifFsConfig`
        :return: configuration for the PifFsMode::On.
        """
        return _otcsdk_python.PifFsConfig_createOn()
    mode = property(_otcsdk_python.PifFsConfig_mode_get, _otcsdk_python.PifFsConfig_mode_set, doc=r""" Mode to be applied to the channel.""")
    __swig_destroy__ = _otcsdk_python.delete_PifFsConfig

# Register PifFsConfig in _otcsdk_python:
_otcsdk_python.PifFsConfig_swigregister(PifFsConfig)
class PifAnalogInputConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.PifAnalogInputConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.PifAnalogInputConfigVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.PifAnalogInputConfigVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.PifAnalogInputConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.PifAnalogInputConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.PifAnalogInputConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.PifAnalogInputConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.PifAnalogInputConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.PifAnalogInputConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.PifAnalogInputConfigVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.PifAnalogInputConfigVector_pop(self)

    def append(self, x):
        return _otcsdk_python.PifAnalogInputConfigVector_append(self, x)

    def empty(self):
        return _otcsdk_python.PifAnalogInputConfigVector_empty(self)

    def size(self):
        return _otcsdk_python.PifAnalogInputConfigVector_size(self)

    def swap(self, v):
        return _otcsdk_python.PifAnalogInputConfigVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.PifAnalogInputConfigVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.PifAnalogInputConfigVector_rend(self)

    def clear(self):
        return _otcsdk_python.PifAnalogInputConfigVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.PifAnalogInputConfigVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.PifAnalogInputConfigVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.PifAnalogInputConfigVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.PifAnalogInputConfigVector_swiginit(self, _otcsdk_python.new_PifAnalogInputConfigVector(*args))

    def push_back(self, x):
        return _otcsdk_python.PifAnalogInputConfigVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.PifAnalogInputConfigVector_front(self)

    def back(self):
        return _otcsdk_python.PifAnalogInputConfigVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.PifAnalogInputConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.PifAnalogInputConfigVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.PifAnalogInputConfigVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.PifAnalogInputConfigVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.PifAnalogInputConfigVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_PifAnalogInputConfigVector

# Register PifAnalogInputConfigVector in _otcsdk_python:
_otcsdk_python.PifAnalogInputConfigVector_swigregister(PifAnalogInputConfigVector)
class PifDigitalInputConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.PifDigitalInputConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.PifDigitalInputConfigVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.PifDigitalInputConfigVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.PifDigitalInputConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.PifDigitalInputConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.PifDigitalInputConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.PifDigitalInputConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.PifDigitalInputConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.PifDigitalInputConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.PifDigitalInputConfigVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.PifDigitalInputConfigVector_pop(self)

    def append(self, x):
        return _otcsdk_python.PifDigitalInputConfigVector_append(self, x)

    def empty(self):
        return _otcsdk_python.PifDigitalInputConfigVector_empty(self)

    def size(self):
        return _otcsdk_python.PifDigitalInputConfigVector_size(self)

    def swap(self, v):
        return _otcsdk_python.PifDigitalInputConfigVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.PifDigitalInputConfigVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.PifDigitalInputConfigVector_rend(self)

    def clear(self):
        return _otcsdk_python.PifDigitalInputConfigVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.PifDigitalInputConfigVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.PifDigitalInputConfigVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.PifDigitalInputConfigVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.PifDigitalInputConfigVector_swiginit(self, _otcsdk_python.new_PifDigitalInputConfigVector(*args))

    def push_back(self, x):
        return _otcsdk_python.PifDigitalInputConfigVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.PifDigitalInputConfigVector_front(self)

    def back(self):
        return _otcsdk_python.PifDigitalInputConfigVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.PifDigitalInputConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.PifDigitalInputConfigVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.PifDigitalInputConfigVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.PifDigitalInputConfigVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.PifDigitalInputConfigVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_PifDigitalInputConfigVector

# Register PifDigitalInputConfigVector in _otcsdk_python:
_otcsdk_python.PifDigitalInputConfigVector_swigregister(PifDigitalInputConfigVector)
class PifAnalogOutputConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.PifAnalogOutputConfigVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.PifAnalogOutputConfigVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.PifAnalogOutputConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.PifAnalogOutputConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.PifAnalogOutputConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.PifAnalogOutputConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.PifAnalogOutputConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.PifAnalogOutputConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.PifAnalogOutputConfigVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_pop(self)

    def append(self, x):
        return _otcsdk_python.PifAnalogOutputConfigVector_append(self, x)

    def empty(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_empty(self)

    def size(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_size(self)

    def swap(self, v):
        return _otcsdk_python.PifAnalogOutputConfigVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_rend(self)

    def clear(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.PifAnalogOutputConfigVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.PifAnalogOutputConfigVector_swiginit(self, _otcsdk_python.new_PifAnalogOutputConfigVector(*args))

    def push_back(self, x):
        return _otcsdk_python.PifAnalogOutputConfigVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_front(self)

    def back(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.PifAnalogOutputConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.PifAnalogOutputConfigVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.PifAnalogOutputConfigVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.PifAnalogOutputConfigVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.PifAnalogOutputConfigVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_PifAnalogOutputConfigVector

# Register PifAnalogOutputConfigVector in _otcsdk_python:
_otcsdk_python.PifAnalogOutputConfigVector_swigregister(PifAnalogOutputConfigVector)
class PifDigitalOutputConfigVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _otcsdk_python.PifDigitalOutputConfigVector___nonzero__(self)

    def __bool__(self):
        return _otcsdk_python.PifDigitalOutputConfigVector___bool__(self)

    def __len__(self):
        return _otcsdk_python.PifDigitalOutputConfigVector___len__(self)

    def __getslice__(self, i, j):
        return _otcsdk_python.PifDigitalOutputConfigVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _otcsdk_python.PifDigitalOutputConfigVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _otcsdk_python.PifDigitalOutputConfigVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _otcsdk_python.PifDigitalOutputConfigVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _otcsdk_python.PifDigitalOutputConfigVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _otcsdk_python.PifDigitalOutputConfigVector___setitem__(self, *args)

    def pop(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_pop(self)

    def append(self, x):
        return _otcsdk_python.PifDigitalOutputConfigVector_append(self, x)

    def empty(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_empty(self)

    def size(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_size(self)

    def swap(self, v):
        return _otcsdk_python.PifDigitalOutputConfigVector_swap(self, v)

    def rbegin(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_rbegin(self)

    def rend(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_rend(self)

    def clear(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_clear(self)

    def get_allocator(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_get_allocator(self)

    def pop_back(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_pop_back(self)

    def erase(self, *args):
        return _otcsdk_python.PifDigitalOutputConfigVector_erase(self, *args)

    def __init__(self, *args):
        _otcsdk_python.PifDigitalOutputConfigVector_swiginit(self, _otcsdk_python.new_PifDigitalOutputConfigVector(*args))

    def push_back(self, x):
        return _otcsdk_python.PifDigitalOutputConfigVector_push_back(self, x)

    def front(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_front(self)

    def back(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_back(self)

    def assign(self, n, x):
        return _otcsdk_python.PifDigitalOutputConfigVector_assign(self, n, x)

    def resize(self, *args):
        return _otcsdk_python.PifDigitalOutputConfigVector_resize(self, *args)

    def insert(self, *args):
        return _otcsdk_python.PifDigitalOutputConfigVector_insert(self, *args)

    def reserve(self, n):
        return _otcsdk_python.PifDigitalOutputConfigVector_reserve(self, n)

    def capacity(self):
        return _otcsdk_python.PifDigitalOutputConfigVector_capacity(self)
    __swig_destroy__ = _otcsdk_python.delete_PifDigitalOutputConfigVector

# Register PifDigitalOutputConfigVector in _otcsdk_python:
_otcsdk_python.PifDigitalOutputConfigVector_swigregister(PifDigitalOutputConfigVector)
class PifConfig(object):
    r"""
    Holds the configuration of the processing interface.

    This can be single PIF or a set of stackable PIFs.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.PifConfig_swiginit(self, _otcsdk_python.new_PifConfig())
    deviceType = property(_otcsdk_python.PifConfig_deviceType_get, _otcsdk_python.PifConfig_deviceType_set, doc=r"""
    Specifies the desired PIF device type.

    For more details please refer either to documentation of the [Process Interface (PIF)](#pif) chapter.
    """)
    deviceCount = property(_otcsdk_python.PifConfig_deviceCount_get, _otcsdk_python.PifConfig_deviceCount_set, doc=r"""
    Specifies how many stackable PIFs should be configurable through the SDK.

    - This setting is only relevant for stackable PIFs. In all other cases the count can be derived from the device type.
    - The number of actually connected stackable PIFs can be lower but the SDK will never report more connected stackable
      PIFs than specified by this count.

    For more details please refer either to documentation of the [Process Interface (PIF)](#pif) chapter.
    """)
    analogInputs = property(_otcsdk_python.PifConfig_analogInputs_get, _otcsdk_python.PifConfig_analogInputs_set, doc=r"""
    Configurations for the analog input channels in no specific order.

    - All available channels that have no configuration are set to mode `off`.
    - If multiple configurations for the same channel exist, only the one that was added first will be applied.
    """)
    digitalInputs = property(_otcsdk_python.PifConfig_digitalInputs_get, _otcsdk_python.PifConfig_digitalInputs_set, doc=r"""
    Configurations for the digital input channels in no specific order.

    - All available channels that have no configuration are set to mode `off`.
    - If multiple configurations for the same channel exist, only the one that was added first will be applied.
    """)
    analogOutputs = property(_otcsdk_python.PifConfig_analogOutputs_get, _otcsdk_python.PifConfig_analogOutputs_set, doc=r"""
    Configurations for the analog output channels in no specific order.

    - All available channels that have no configuration are set to mode `off`.
    - If multiple configurations for the same channel exist, only the one that was added first will be applied.
    """)
    digitalOutputs = property(_otcsdk_python.PifConfig_digitalOutputs_get, _otcsdk_python.PifConfig_digitalOutputs_set, doc=r"""
    Configurations for the digital output channels in no specific order.

    - All available channels that have no configuration are set to mode `off`.
    - If multiple configurations for the same channel exist, only the one that was added first will be applied.
    """)
    failSafe = property(_otcsdk_python.PifConfig_failSafe_get, _otcsdk_python.PifConfig_failSafe_set, doc=r"""
    Configuration for the fail safe channel.

    The configuration will only be applied, if a fail safe channel exists.
    """)
    __swig_destroy__ = _otcsdk_python.delete_PifConfig

# Register PifConfig in _otcsdk_python:
_otcsdk_python.PifConfig_swigregister(PifConfig)
Verbosity_Off = _otcsdk_python.Verbosity_Off
r""" Off."""
Verbosity_Error = _otcsdk_python.Verbosity_Error
r""" Error."""
Verbosity_Warning = _otcsdk_python.Verbosity_Warning
r""" Warning."""
Verbosity_Info = _otcsdk_python.Verbosity_Info
r""" Info."""
Verbosity_Debug = _otcsdk_python.Verbosity_Debug
r""" Debug."""
CalibrationFileSource_Device = _otcsdk_python.CalibrationFileSource_Device
r""" The calibration files are fetched from the on-board memory of the device. Not supported by all devices."""
CalibrationFileSource_Filesystem = _otcsdk_python.CalibrationFileSource_Filesystem
r""" The calibration files are copied from a local filesystem directory."""
CalibrationFileSource_Internet = _otcsdk_python.CalibrationFileSource_Internet
r""" The calibration files are downloaded from Optris servers. Requires internet access."""
CalibrationFileSource_Empty = _otcsdk_python.CalibrationFileSource_Empty
r""" No calibration source wanted."""
class Sdk(object):
    r""" Static class granting access to SDK wide configuration and utility functions."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def init(*args):
        r"""
        Initializes the SDK.

        It sets the verbosity levels of the internal logger of the SDK and starts the EnumerationManager in a dedicated thread
        to monitor the availability of devices.

        :type logScreen: int, in
        :param logScreen:         defines the minimum verbosity level of log messages displayed on the standard output and error.
        :type logFile: int, in
        :param logFile:           defines the minimum verbosity level of log messages out to the logfile.
        :type logFilenamePrefix: string, in, optional
        :param logFilenamePrefix: for the log file (logFilenamePrefix_YYYY_MM_DD-hh-mm-ss.log). If empty, it defaults to "OtcSDK".
        """
        return _otcsdk_python.Sdk_init(*args)

    @staticmethod
    def setCalibrationFileSources(first, second, third):
        r"""
        Sets the priority of the calibration file sources.

        The priority of the sources needs to be set prior to connecting to a device. If you want to use less than three potential calibration
        file source, set the one you do not require to Empty. The different sources have individual requirements for them to work:

        - Device. Not all types of Optris cameras have their calibration files stored on-device.
        - Filesystem. The source directory should be accessible and the SDK should have the rights to copy the calibration files from
          it to their target destination. The source directory needs to be specified via the Sdk::setCalibrationFileSourceDirectory()
          method.
        - Internet. Access to the internet is required.

        Notes: The SDK does not yet feature the ability to download the calibration from the device.

        :type first: int, in
        :param first:  source with the highest priority.
        :type second: int, in
        :param second: source with a medium priority.
        :type third: int, in
        :param third:  source with the lowest priority.

        :rtype: boolean
        :return: true, if priority was successfully set. False, otherwise.
        """
        return _otcsdk_python.Sdk_setCalibrationFileSources(first, second, third)

    @staticmethod
    def setCalibrationFileSourceDirectory(sourceDirectoryPath):
        r"""
        Sets the source directory from which calibration files can be copied.

        If set to an empty string, the SDK will skip this option of acquiring calibration files.

        :type sourceDirectoryPath: string, in
        :param sourceDirectoryPath: from which calibration files can be copied.

        :rtype: boolean
        :return: true, if the source directory was set successfully. False, otherwise.
        """
        return _otcsdk_python.Sdk_setCalibrationFileSourceDirectory(sourceDirectoryPath)

    @staticmethod
    def getVersionInfo():
        r"""
        Returns an object holding version and build information about the SDK.

        :rtype: :py:class:`VersionInfo`
        :return: object holding version and build information about the SDK.
        """
        return _otcsdk_python.Sdk_getVersionInfo()
    __swig_destroy__ = _otcsdk_python.delete_Sdk

# Register Sdk in _otcsdk_python:
_otcsdk_python.Sdk_swigregister(Sdk)
class IRImagerClient(object):
    r"""
    Base class for clients observing an IRImager.

    The architecture is following the Observer design pattern. To receive data like thermal frames from your device
    derive your own class from it and implement the callback methods. After creating an instance of you need to
    register it with an IRImager object by calling its IRImager::addClient() method.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
        Constructor.

        |

        *Overload 2:*
        No copy constructor.
        """
        if self.__class__ == IRImagerClient:
            _self = None
        else:
            _self = self
        _otcsdk_python.IRImagerClient_swiginit(self, _otcsdk_python.new_IRImagerClient(_self, *args))
    __swig_destroy__ = _otcsdk_python.delete_IRImagerClient

    def onThermalFrame(self, thermal, meta):
        r"""
        Callback method for thermal frames.

        The provided references will remain valid outside the callback but the data that they are pointing to will be
        overwritten. Make a copy (C++) or use the clone() method (other languages) if you want to use them outside of
        the callback.

        The references are const. Thus, you have only read access to the objects they are referring to. Attempts to
        manipulate their content will cause issues.

        This callback will also be triggered during the initial startup calibration phase following a successful device
        connection. During this time the thermal data is unreliable. You can detect this phase by checking whether the
        flag state stored in the meta data (FrameMetadata::getFlagState()) is set to Initializing.

        :type thermal: :py:class:`ThermalFrame`, in
        :param thermal: frame.
        :type meta: :py:class:`FrameMetadata`, in
        :param meta:    additional meta data.
        """
        return _otcsdk_python.IRImagerClient_onThermalFrame(self, thermal, meta)

    def onThermalFrameEvent(self, thermal, energy, meta, events):
        r"""
        Callback method for thermal frames triggered with a raising edge event on PIF digital input or software
               trigger.

        The provided references will remain valid outside the callback but the data that they are pointing to will be
        overwritten. Make a copy (C++) or use the clone() method (other languages) if you want to use them outside of
        the callback.

        The references are const. Thus, you have only read access to the objects they are referring to. Attempts to
        manipulate their content will cause issues.

        For future use.

        :type thermal: :py:class:`ThermalFrame`, in
        :param thermal: frame.
        :type energy: :py:class:`Frame`, in
        :param energy:  frame.
        :type meta: :py:class:`FrameMetadata`, in
        :param meta:    additional meta data for both frames.
        :type events: std::vector< optris::SnapshotEvent,std::allocator< optris::SnapshotEvent > >, in
        :param events:  snapshot events.
        """
        return _otcsdk_python.IRImagerClient_onThermalFrameEvent(self, thermal, energy, meta, events)

    def onFlagStateChange(self, flagState):
        r"""
        Callback method for flag state events. The method is called when the flag state changes.

        :type flagState: int, in
        :param flagState: current flag state.
        """
        return _otcsdk_python.IRImagerClient_onFlagStateChange(self, flagState)

    def onMeasurementField(self, field):
        r"""
        Callback method for measurement fields. The method is called when the calculation has finished.

        The provided reference will remain valid outside the callback but the data that it is pointing to will be
        overwritten. Make a copy (C++) or use the clone() method (other languages) if you want to use it outside
        of the callback.

        The reference is const. Thus, you have only read access to the object it is referring to. Attempts to
        manipulate its content will cause issues.

        :type field: :py:class:`MeasurementField`, in
        :param field: measurement field.
        """
        return _otcsdk_python.IRImagerClient_onMeasurementField(self, field)

    def onPifUncommittedValue(self, name, unit, value):
        r"""
        Called when an updated uncommitted value is available.

        The callback is only triggered when the corresponding PIF analog input signal has changed.

        :type name: string, in
        :param name:  of the uncommitted value as specified in the configuration.
        :type unit: string, in
        :param unit:  of the uncommitted value as specified in the con
        :type value: float, in
        :param value: calculated from the PIF analog input signal based on the configured gain and offset.
        """
        return _otcsdk_python.IRImagerClient_onPifUncommittedValue(self, name, unit, value)

    def onConnectionLost(self):
        r"""
        Called when a connection loss is detected.

        A connection loss can not be recovered. This happens, for example, if the USB connection is interrupted by
        pulling the plug.

        It is up to the client to call IRImager:disconnect(). This gives the client the ability to ensure a graceful
        disconnect on its end.
        """
        return _otcsdk_python.IRImagerClient_onConnectionLost(self)

    def onConnectionTimeout(self):
        r"""
        Called when a connection timeout is detected.

        Unlike with connection losses you may recover from a timeout.

        Connection timeouts are the only way to detect connection losses with Ethernet devices. This is due to the
        fact that these devices continuously send UDP packages once they are powered. Besides receiving these packages
        the SDK has no way of knowing whether the connection is lost.

        It is up to the client to call IRImager:disconnect(). This gives the client the ability to ensure a graceful
        disconnect on its end.
        """
        return _otcsdk_python.IRImagerClient_onConnectionTimeout(self)

    def onProcessExit(self):
        r"""Callback method for synchronizing data. This is the very last method to be called for each raw data set."""
        return _otcsdk_python.IRImagerClient_onProcessExit(self)
    def __disown__(self):
        self.this.disown()
        _otcsdk_python.disown_IRImagerClient(self)
        return weakref.proxy(self)

# Register IRImagerClient in _otcsdk_python:
_otcsdk_python.IRImagerClient_swigregister(IRImagerClient)
class IRImagerConfig(object):
    r""" Holds the SDK settings found in the configuration file."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r""" Constructor."""
        _otcsdk_python.IRImagerConfig_swiginit(self, _otcsdk_python.new_IRImagerConfig())

    def validate(self):
        r"""
        Validates the configuration settings.

        If a faulty setting can be replaced by a valid default this method will do so automatically and
        print a log warning message. If no valid default is available a SDKException is throws instead.

        :raises: SDKException if configuration contains uncorrectable invalid settings.
        """
        return _otcsdk_python.IRImagerConfig_validate(self)
    version = property(_otcsdk_python.IRImagerConfig_version_get, _otcsdk_python.IRImagerConfig_version_set, doc=r""" Version of the configuration file.""")
    serialNumber = property(_otcsdk_python.IRImagerConfig_serialNumber_get, _otcsdk_python.IRImagerConfig_serialNumber_set, doc=r""" Serial number of the device.""")
    connectionInterface = property(_otcsdk_python.IRImagerConfig_connectionInterface_get, _otcsdk_python.IRImagerConfig_connectionInterface_set, doc=r"""
    Interface used to connect to the device (USB, Ethernet).

    Case insensitive.
    """)
    ipAddress = property(_otcsdk_python.IRImagerConfig_ipAddress_get, _otcsdk_python.IRImagerConfig_ipAddress_set, doc=r""" IP address of the device.""")
    port = property(_otcsdk_python.IRImagerConfig_port_get, _otcsdk_python.IRImagerConfig_port_set, doc=r""" Local UDP port to which the device sends data to.""")
    checkIp = property(_otcsdk_python.IRImagerConfig_checkIp_get, _otcsdk_python.IRImagerConfig_checkIp_set, doc=r"""
    Flag indicating whether to only process UDP packages from the IP address specified by the
           ipAddress member variable.

    Set to true to activate this check or set to false to deactivate it.
    """)
    connectionTimeout = property(_otcsdk_python.IRImagerConfig_connectionTimeout_get, _otcsdk_python.IRImagerConfig_connectionTimeout_set, doc=r"""
    Specifies the time in seconds that has to elapse without no new frame received until an
           connection timeout occurs.

    If connection timeout is detected the IRImager instance will call the IRImagerClient::onConnectionTimeout()
    callback.
    """)
    bufferQueueSize = property(_otcsdk_python.IRImagerConfig_bufferQueueSize_get, _otcsdk_python.IRImagerConfig_bufferQueueSize_set, doc=r"""
    Internal queue size for buffers holding received frames.

    This setting has no influence on the size of the buffers. Their size is determined by the used video
    format.
    """)
    width = property(_otcsdk_python.IRImagerConfig_width_get, _otcsdk_python.IRImagerConfig_width_set, doc=r"""
    Width in pixels of the output frame.

    If width, height and framerate are all set to 0 the SDK will use the first available video format.
    """)
    height = property(_otcsdk_python.IRImagerConfig_height_get, _otcsdk_python.IRImagerConfig_height_set, doc=r"""
    Height in pixels of the output frame.

    If width, height and framerate are all set to 0 the SDK will use the first available video format.
    """)
    framerate = property(_otcsdk_python.IRImagerConfig_framerate_get, _otcsdk_python.IRImagerConfig_framerate_set, doc=r"""
    Output framerate in Hz.

    If width, height and framerate are all set to 0 the SDK will use the first available video format.
    """)
    subsampledFramerate = property(_otcsdk_python.IRImagerConfig_subsampledFramerate_get, _otcsdk_python.IRImagerConfig_subsampledFramerate_set, doc=r"""
    Subsampled output framerate.

    The SDK internally reduces the output framerate to this value. This setting has no effect on the device
    itself, meaning the device will always send frames at the rate specified by the framerate member variable.

    Set to a value in [0, framerate] to achieve subsampling or set to a value to less than 0 to deactivate this
    feature.
    """)
    fieldOfView = property(_otcsdk_python.IRImagerConfig_fieldOfView_get, _otcsdk_python.IRImagerConfig_fieldOfView_set, doc=r"""
    Field of view of the optics in degree.

    If the field of view is set to 0 and the opticsText is empty the SDK will use the first available optics.
    """)
    opticsText = property(_otcsdk_python.IRImagerConfig_opticsText_get, _otcsdk_python.IRImagerConfig_opticsText_set, doc=r"""
    Optional text further specifying the used optics.

    If the field of view is set to 0 and the opticsText is empty the SDK will use the first available optics.
    """)
    minTemperature = property(_otcsdk_python.IRImagerConfig_minTemperature_get, _otcsdk_python.IRImagerConfig_minTemperature_set, doc=r"""
    Lower limit of the desired temperature range in 째C.

    Always use the temperatures for the not extended range.

    If the minimum and maximum temperature are set to 0 the SDK will use the first available temperature range.
    """)
    maxTemperature = property(_otcsdk_python.IRImagerConfig_maxTemperature_get, _otcsdk_python.IRImagerConfig_maxTemperature_set, doc=r"""
    Upper limit of the desired temperature range in 째C.

    Always use the temperatures for the not extended range.

    If the minimum and maximum temperature are set to 0 the SDK will use the first available temperature range.
    """)
    enableExtendedTemperatureRange = property(_otcsdk_python.IRImagerConfig_enableExtendedTemperatureRange_get, _otcsdk_python.IRImagerConfig_enableExtendedTemperatureRange_set, doc=r"""
    Extends the chosen temperature range if possible.

    When extending the temperature range you do not need to change the values for minTemperature and maxTemperature.
    The range is always specified by the non extended temperatures.

    Warning: Extended temperature ranges are intended to help you align the field of view of your camera. The precision
             of the temperature measurements in this mode may not be within the specification.
    """)
    enableHighPrecisionTemperature = property(_otcsdk_python.IRImagerConfig_enableHighPrecisionTemperature_get, _otcsdk_python.IRImagerConfig_enableHighPrecisionTemperature_set, doc=r"""
    Use high precision temperatures if available.

    If true, high precision temperatures will automatically be used if the device and the chosen temperature range
    supports them.
    """)
    autoFlag = property(_otcsdk_python.IRImagerConfig_autoFlag_get, _otcsdk_python.IRImagerConfig_autoFlag_set, doc=r"""
    Enable the automatic triggering of flag cycles.

    Optris thermal cameras feature an internal shutter flag. It need to be closed periodically for the SDK to compensate
    for drifting temperature measurements.

    If set to true, flag cycles will be automatically triggered when one of the temperatures measured by internal probes
    changes by more than 0.1 째C.
    """)
    minInterval = property(_otcsdk_python.IRImagerConfig_minInterval_get, _otcsdk_python.IRImagerConfig_minInterval_set, doc=r""" Minimum time in seconds that has to pass before a new flag cycle can be triggered.""")
    maxInterval = property(_otcsdk_python.IRImagerConfig_maxInterval_get, _otcsdk_python.IRImagerConfig_maxInterval_set, doc=r""" Maximum time in seconds that can pass before a new flag cycle is forced.""")
    chipHeatingMode = property(_otcsdk_python.IRImagerConfig_chipHeatingMode_get, _otcsdk_python.IRImagerConfig_chipHeatingMode_set, doc=r"""
    Specified how and if the sensor chip is beeing heated.

    The following modes are available:
     - floating: The sensor chip will not be heated.
     - auto    : The sensor chip will be heated to the temperature specified in the calibrations.
     - fixed   : The sensor chip will be heated to the temperature specified by the chipHeatingTemperature settings.

    Case insensitive.
    """)
    chipHeatingTemperature = property(_otcsdk_python.IRImagerConfig_chipHeatingTemperature_get, _otcsdk_python.IRImagerConfig_chipHeatingTemperature_set, doc=r""" Temperature in 째C for the fixed chipHeatingMode.""")
    focusMotorPosition = property(_otcsdk_python.IRImagerConfig_focusMotorPosition_get, _otcsdk_python.IRImagerConfig_focusMotorPosition_set, doc=r"""
    Position of the focus motor in % ([0, 100]).

    Should be in [0., 100.]. Set to a value less than 0 for the SDK to ignore this setting.
    """)
    emissivity = property(_otcsdk_python.IRImagerConfig_emissivity_get, _otcsdk_python.IRImagerConfig_emissivity_set, doc=r"""
    Emissivity of the observed object.

    Should be in [0., 1.].
    """)
    transmissivity = property(_otcsdk_python.IRImagerConfig_transmissivity_get, _otcsdk_python.IRImagerConfig_transmissivity_set, doc=r"""
    Transmissivity of the observed object.

    Should be in [0. , 1.].
    """)
    ambientTemperature = property(_otcsdk_python.IRImagerConfig_ambientTemperature_get, _otcsdk_python.IRImagerConfig_ambientTemperature_set, doc=r"""
    Ambient temperature in 째C.

    Set to INVALID_TEMPERATURE (-100) or less to force the SDK to estimate the ambient temperature based on reading of
    the internal thermal probes of the device.
    """)
    enableMultiThreading = property(_otcsdk_python.IRImagerConfig_enableMultiThreading_get, _otcsdk_python.IRImagerConfig_enableMultiThreading_set, doc=r"""
    Activate multithreading for postprocessing.

    Warning: Experimental setting.
    """)
    failSafeFlagTimeouts = property(_otcsdk_python.IRImagerConfig_failSafeFlagTimeouts_get, _otcsdk_python.IRImagerConfig_failSafeFlagTimeouts_set, doc=r"""
    Indicates whether a flag timeout that caused the failure of a flag cycle should trigger the fail safe.

    A flag timeout occurs when the shutter flag does not reach its expected state within a given time frame. If this happens, the current
    flag cycle will be considered to have failed.
    """)
    failSafeFlagTimeoutsMaxCycleFailures = property(_otcsdk_python.IRImagerConfig_failSafeFlagTimeoutsMaxCycleFailures_get, _otcsdk_python.IRImagerConfig_failSafeFlagTimeoutsMaxCycleFailures_set, doc=r"""
    Specifies the number of failed flag cycles to be tolerated before fail safe is triggered due to flag timeouts.

    See also: IRImagerConfig::failSafeTriggerOnFlagTimeout
    """)
    failSafeProcessingChainTimeouts = property(_otcsdk_python.IRImagerConfig_failSafeProcessingChainTimeouts_get, _otcsdk_python.IRImagerConfig_failSafeProcessingChainTimeouts_set, doc=r"""
    Indicates whether a failure of the processing chain to reach all of its endpoints (thermal frame and measurement fields) within a given
           time frame should trigger the fail safe.

    If set to false, the fail safe will still be triggered when the processing chain itself crashes or gets stuck.
    """)
    measurementFields = property(_otcsdk_python.IRImagerConfig_measurementFields_get, _otcsdk_python.IRImagerConfig_measurementFields_set, doc=r""" Measurement field configuration.""")
    processInterface = property(_otcsdk_python.IRImagerConfig_processInterface_get, _otcsdk_python.IRImagerConfig_processInterface_set, doc=r""" Processing interface configuration.""")
    __swig_destroy__ = _otcsdk_python.delete_IRImagerConfig

# Register IRImagerConfig in _otcsdk_python:
_otcsdk_python.IRImagerConfig_swigregister(IRImagerConfig)
class IRImagerConfigReader(object):
    r""" Reads SDK configuration XML files."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def read(filename):
        r"""
        Reads the XML configuration file with the given filename.

        :type filename: string, in
        :param filename: path to the XML configuration file.

        :rtype: :py:class:`IRImagerConfig`
        :return: read SDK configuration.

        :raises: SDKException if reading the XML configuration file failed.
        """
        return _otcsdk_python.IRImagerConfigReader_read(filename)
    __swig_destroy__ = _otcsdk_python.delete_IRImagerConfigReader

# Register IRImagerConfigReader in _otcsdk_python:
_otcsdk_python.IRImagerConfigReader_swigregister(IRImagerConfigReader)
class ProcessInterface(object):
    r"""
    Interface defining the API for interacting with process interfaces (PIFs).

    Each PIF can have up to five different channel type. The API uses the following abbreviations to mark
    resources specific to a channel type:

    - `Ai` - analog inputs
    - `Di` - digital inputs
    - `Ao` - analog outputs
    - `Do` - digital outputs
    - `Fs` - fail safe

    In case of stackable PIFs the number of configurable PIFs can deviate from the number of actually
    connected PIFs. To reflect this the API features different count methods for PIF devices and PIF
    channels:

    __Devices__
    - `getActualDeviceCount()` returns the number of actually connected devices.
    - `getConfigurableDeviceCount()` returns the number configurable devices.

    Notes: On non-stackable PIFs these methods yield the same values.

    __Channels__ (`XX` denotes the channel type)
    - `getActualXXCount()` returns the count of all `XX` channels on actually connected devices.
    - `getConfigurableXXCount()` returns the count of all `XX` channels on configurable devices.
    - `getXXCountPerDevice()` returns the count of `XX` channels per individual device.

    The actual PIF device count can never exceed the configurable device count.

    For more details and an overview of the process interface capabilities please refer to the
    [Process Interface (PIF)](#pif) chapter.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _otcsdk_python.delete_ProcessInterface

    def getDeviceType(self):
        r"""
        Returns the PIF device type.

        :rtype: int
        :return: PIF device type.
        """
        return _otcsdk_python.ProcessInterface_getDeviceType(self)

    def getActualDeviceCount(self):
        r"""
        Returns the count of actually connected PIFs.

        The method only returns count of connected PIFs whose type equals the one returned by getDeviceType().

        This count can never exceed the configurable device count returned by getConfigurableDeviceCount().

        :rtype: int
        :return: count of actually connected PIFs.
        """
        return _otcsdk_python.ProcessInterface_getActualDeviceCount(self)

    def getConfigurableDeviceCount(self):
        r"""
        Returns the count of configurable PIFs.

        :rtype: int
        :return: count of configurable PIFs.
        """
        return _otcsdk_python.ProcessInterface_getConfigurableDeviceCount(self)

    def isActualConnected(self):
        r"""
        Returns whether a PIF is actually connected.

        :rtype: boolean
        :return: false if the actual device count is 0. True otherwise.
        """
        return _otcsdk_python.ProcessInterface_isActualConnected(self)

    def getDeviceSerialNumber(self, deviceIndex):
        r"""
        Returns the serial number of the PIF with the given device index.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the PIF device.

        :rtype: int
        :return: serial number of the PIF with the given device index.

        :raises: SDKException if the device index is out of range.
        """
        return _otcsdk_python.ProcessInterface_getDeviceSerialNumber(self, deviceIndex)

    def getDeviceFirmwareRevision(self, deviceIndex):
        r"""
        Returns the firmware revision of the PIF with the given device index.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the PIF device.

        :rtype: int
        :return: firmware revision of the PIF with the given device index.

        :raises: SDKException if the device index is out of range.
        """
        return _otcsdk_python.ProcessInterface_getDeviceFirmwareRevision(self, deviceIndex)

    def setConfig(self, config):
        r"""
        Sets the given configuration for the entire process interface.

        :type config: :py:class:`PifConfig`, in
        :param config: to set.

        :raises: SDKException if the provided configuration could not be applied.
        """
        return _otcsdk_python.ProcessInterface_setConfig(self, config)

    def getConfig(self):
        r"""
        Returns the current configuration of the entire process interface.

        :rtype: :py:class:`PifConfig`
        :return: the current configuration of the entire process interface.
        """
        return _otcsdk_python.ProcessInterface_getConfig(self)

    def getActualAiCount(self):
        r"""
        Returns the count of all analog input channels on actually connected PIFs.

        :rtype: int
        :return: count of all analog input channels on actually connected PIFs.
        """
        return _otcsdk_python.ProcessInterface_getActualAiCount(self)

    def getConfigurableAiCount(self):
        r"""
        Returns the count of all analog input channels on configurable PIFs.

        :rtype: int
        :return: count of all analog input channels on configurable PIFs.
        """
        return _otcsdk_python.ProcessInterface_getConfigurableAiCount(self)

    def getAiCountPerDevice(self):
        r"""
        Returns the count of all analog input channels on a single PIF.

        :rtype: int
        :return: count of all analog input channels on a single PIF.
        """
        return _otcsdk_python.ProcessInterface_getAiCountPerDevice(self)

    def setAiConfig(self, config):
        r"""
        Sets the configuration for a single analog input channel.

        :type config: :py:class:`PifAiConfig`, in
        :param config: to set.

        :raises: SDKExceptions if the provided configuration could not be applied.
        """
        return _otcsdk_python.ProcessInterface_setAiConfig(self, config)

    def getAiConfig(self, deviceIndex, pinIndex):
        r"""
        Returns the current configuration of the specified analog input channel.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifAiConfig`
        :return: current configuration of the specified analog input channel.

        :raises: SDKException if the given indices are out of range.
        """
        return _otcsdk_python.ProcessInterface_getAiConfig(self, deviceIndex, pinIndex)

    def getActualDiCount(self):
        r"""
        Returns the count of all digital input channels on actually connected PIFs.

        :rtype: int
        :return: count of all digital input channels on actually connected PIFs.
        """
        return _otcsdk_python.ProcessInterface_getActualDiCount(self)

    def getConfigurableDiCount(self):
        r"""
        Returns the count of all digital input channels on configurable PIFs.

        :rtype: int
        :return: count of all digital input channels on configurable PIFs.
        """
        return _otcsdk_python.ProcessInterface_getConfigurableDiCount(self)

    def getDiCountPerDevice(self):
        r"""
        Returns the count of all digital input channels on a single PIF.

        :rtype: int
        :return: count of all digital input channels on a single PIF.
        """
        return _otcsdk_python.ProcessInterface_getDiCountPerDevice(self)

    def setDiConfig(self, config):
        r"""
        Sets the configuration for a single digital input channel.

        :type config: :py:class:`PifDiConfig`, in
        :param config: to set.

        :raises: SDKExceptions if the provided configuration could not be applied.
        """
        return _otcsdk_python.ProcessInterface_setDiConfig(self, config)

    def getDiConfig(self, deviceIndex, pinIndex):
        r"""
        Returns the current configuration of the specified digital input channel.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifDiConfig`
        :return: current configuration of the specified digital input channel.

        :raises: SDKException if the given indices are out of range.
        """
        return _otcsdk_python.ProcessInterface_getDiConfig(self, deviceIndex, pinIndex)

    def getActualAoCount(self):
        r"""
        Returns the count of all analog output channels on actually connected PIFs.

        :rtype: int
        :return: count of all analog output channels on actually connected PIFs.
        """
        return _otcsdk_python.ProcessInterface_getActualAoCount(self)

    def getConfigurableAoCount(self):
        r"""
        Returns the count of all analog output channels on configurable PIFs.

        :rtype: int
        :return: count of all analog output channels on configurable PIFs.
        """
        return _otcsdk_python.ProcessInterface_getConfigurableAoCount(self)

    def getAoCountPerDevice(self):
        r"""
        Returns the count of all analog output channels on a single PIF.

        :rtype: int
        :return: count of all analog output channels on a single PIF.
        """
        return _otcsdk_python.ProcessInterface_getAoCountPerDevice(self)

    def getDefaultAoOutputMode(self):
        r"""
        Returns the default analog output mode of the PIF.

        :rtype: int
        :return: default analog output mode of the PIF.
        """
        return _otcsdk_python.ProcessInterface_getDefaultAoOutputMode(self)

    def setAoConfig(self, config):
        r"""
        Sets the configuration for a single analog output channel.

        :type config: :py:class:`PifAoConfig`, in
        :param config: to set.

        :raises: SDKExceptions if the provided configuration could not be applied.
        """
        return _otcsdk_python.ProcessInterface_setAoConfig(self, config)

    def getAoConfig(self, deviceIndex, pinIndex):
        r"""
        Returns the current configuration of the specified analog output channel.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifAoConfig`
        :return: current configuration of the specified analog output channel.

        :raises: SDKException if the given indices are out of range.
        """
        return _otcsdk_python.ProcessInterface_getAoConfig(self, deviceIndex, pinIndex)

    def setAoValue(self, deviceIndex, pinIndex, value):
        r"""
        Sets the output value of the specified analog output channel.

        The provided value is automatically clipped to the set output mode limits.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type value: float, in
        :param value:       to output.

        :raises: SDKException if the indices are out of range or if the channel is not set to PifAoMode::ExternalCommunication.
        """
        return _otcsdk_python.ProcessInterface_setAoValue(self, deviceIndex, pinIndex, value)

    def getActualDoCount(self):
        r"""
        Returns the count of all digital output channels on actually connected PIFs.

        :rtype: int
        :return: count of all digital output channels on actually connected PIFs.
        """
        return _otcsdk_python.ProcessInterface_getActualDoCount(self)

    def getConfigurableDoCount(self):
        r"""
        Returns the count of all digital output channels on configurable PIFs.

        :rtype: int
        :return: count of all digital output channels on configurable PIFs.
        """
        return _otcsdk_python.ProcessInterface_getConfigurableDoCount(self)

    def getDoCountPerDevice(self):
        r"""
        Returns the count of all digital output channels on a single PIF.

        :rtype: int
        :return: count of all digital output channels on a single PIF.
        """
        return _otcsdk_python.ProcessInterface_getDoCountPerDevice(self)

    def setDoConfig(self, config):
        r"""
        Sets the configuration for a single digital output channel.

        :type config: :py:class:`PifDoConfig`, in
        :param config: to set.

        :raises: SDKExceptions if the provided configuration could not be applied.
        """
        return _otcsdk_python.ProcessInterface_setDoConfig(self, config)

    def getDoConfig(self, deviceIndex, pinIndex):
        r"""
        Returns the current configuration of the specified digital output channel.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.

        :rtype: :py:class:`PifDoConfig`
        :return: current configuration of the specified digital output channel.

        :raises: SDKException if the given indices are out of range.
        """
        return _otcsdk_python.ProcessInterface_getDoConfig(self, deviceIndex, pinIndex)

    def setDoValue(self, deviceIndex, pinIndex, value):
        r"""
        Sets the output value of the specified digital output channel.

        :type deviceIndex: int, in
        :param deviceIndex: identifying the channel.
        :type pinIndex: int, in
        :param pinIndex:    identifying the channel.
        :type value: boolean, in
        :param value:       to output.

        :raises: SDKException if the indices are out of range or if the channel is not set to PifDoMode::ExternalCommunication.
        """
        return _otcsdk_python.ProcessInterface_setDoValue(self, deviceIndex, pinIndex, value)

    def hasFs(self):
        r"""
        Returns wether the PIF has a fail safe channel.

        :rtype: boolean
        :return: true if the PIF has a fail safe channel. False otherwise.
        """
        return _otcsdk_python.ProcessInterface_hasFs(self)

    def setFsConfig(self, config):
        r"""
        Sets the configuration for the fail safe channel.

        :type config: :py:class:`PifFsConfig`, in
        :param config: to set.

        :raises: SDKException if no fail safe channel is available.
        """
        return _otcsdk_python.ProcessInterface_setFsConfig(self, config)

    def getFsConfig(self):
        r"""
        Returns the current fail safe channel configuration.

        :rtype: :py:class:`PifFsConfig`
        :return: current fail safe channel configuration.

        :raises: SDKException if no fail safe channel is available.
        """
        return _otcsdk_python.ProcessInterface_getFsConfig(self)

# Register ProcessInterface in _otcsdk_python:
_otcsdk_python.ProcessInterface_swigregister(ProcessInterface)
class IRImager(object):
    r""" Interface defining the API for interacting with Optris thermal cameras."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _otcsdk_python.delete_IRImager

    def connect(self, *args):
        r"""
        *Overload 1:*

        Connects to the device with the given configuration.

        A configuration with a serial number of 0 will be rejected.

        :type config: :py:class:`IRImagerConfig`, in
        :param config: configuration.

        :raises: SDKException if connecting fails.

        |

        *Overload 2:*

        Connects to the device with the given device information.

        Notes: If the serial number is set to 0, the SDK will use the `EnumerationManager` to find a device to connect to. This
              currently works only for a single USB device.

        :type deviceInfo: :py:class:`DeviceInfo`, in
        :param deviceInfo: device information.

        :raises: SDKException if connecting fails.

        |

        *Overload 3:*

        Connects to the device with the given serial number.

        Notes: If the serial number is set to 0, the SDK will use the `EnumerationManager` to find a device to connect to. This
              currently works only for a single USB device.

        :type serialNumber: int, in
        :param serialNumber: of the device.

        :raises: SDKException if connecting fails.
        """
        return _otcsdk_python.IRImager_connect(self, *args)

    def disconnect(self):
        r""" Disconnects from the current device."""
        return _otcsdk_python.IRImager_disconnect(self)

    def isConnected(self):
        r"""
        Returns whether a connection is established.

        :rtype: boolean
        :return: true if a connection is established. False otherwise.
        """
        return _otcsdk_python.IRImager_isConnected(self)

    def addClient(self, client):
        r"""
        Adds an observer/client that will be updated when new data arrives.

        :type client: :py:class:`IRImagerClient`, in
        :param client: callback client.
        """
        return _otcsdk_python.IRImager_addClient(self, client)

    def removeClient(self, client):
        r"""
        Removes the given observer/client.

        :type client: :py:class:`IRImagerClient`, in
        :param client: to remove.

        :rtype: boolean
        :return: true, if the client was removed. False otherwise.
        """
        return _otcsdk_python.IRImager_removeClient(self, client)

    def run(self):
        r"""
        Runs the processing loop continuously.

        Blocks until stopRunning() or disconnect() is called from another thread or until the application
        terminates.

        See also: stopRunning(), disconnect()
        """
        return _otcsdk_python.IRImager_run(self)

    def runAsync(self):
        r"""
        Runs the processing loop continuously in a dedicated thread.

        Runs until stopRunning() or disconnect() is called from another thread or until the application
        terminates.

        Notes: All callback methods of a registered client now are called from this processing thread.

        :rtype: boolean
        :return: true if the thread started within a second. False otherwise.

        See also: stopRunning(), disconnect()
        """
        return _otcsdk_python.IRImager_runAsync(self)

    def stopRunning(self):
        r""" Stops the continuously running processing loop."""
        return _otcsdk_python.IRImager_stopRunning(self)

    def isRunning(self):
        r"""
        Returns whether the processing loop is currently running.

        :rtype: boolean
        :return: true if the processing loop is running. False otherwise.
        """
        return _otcsdk_python.IRImager_isRunning(self)

    def getDeviceType(self):
        r"""
        Returns the type of device the IRImager is connected to.

        :rtype: int
        :return: type of device the IRImager is connected to or unknown if not connected.
        """
        return _otcsdk_python.IRImager_getDeviceType(self)

    def getSerialNumber(self):
        r"""
        Returns the serial number of the connected device.

        :rtype: int
        :return: serial number of the connected device or 0 if not connected.
        """
        return _otcsdk_python.IRImager_getSerialNumber(self)

    def getHardwareRevision(self):
        r"""
        Returns the hardware revision of the connected device.

        :rtype: int
        :return: hardware revision number of the connected device or 0 if not connected.
        """
        return _otcsdk_python.IRImager_getHardwareRevision(self)

    def getFirmwareRevision(self):
        r"""
        Returns the firmware revision of the connected device.

        :rtype: int
        :return: firmware revision number of the connected device or 0 if not connected.
        """
        return _otcsdk_python.IRImager_getFirmwareRevision(self)

    def getOperationModes(self):
        r"""
        Returns the operation modes for the currently connected device.

        Each operation mode holds a valid combination of optics, temperature range and video format settings
        for the currently connected device.

        :rtype: std::vector< std::shared_ptr< optris::OperationMode >,std::allocator< std::shared_ptr< optris::OperationMode > > >
        :return: operation modes for the currently connected device.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_getOperationModes(self)

    def getActiveOperationMode(self):
        r"""
        Returns the active operation mode for the currently connected device.

        Each operation mode holds a valid combination of optics, temperature range and video format settings
        for the currently connected device.

        :rtype: :py:class:`OperationMode`
        :return: active operation mode for the currently connected device.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_getActiveOperationMode(self)

    def addMeasurementField(self, config):
        r"""
        Adds a measurement field that is processed for every new thermal frame.

        The resulting data can be accessed via the IRImagerClient::onMeasurementField() callback.

        :type config: :py:class:`MeasurementFieldConfig`, in
        :param config: of the measurement field to add.

        :rtype: int
        :return: the index of the added measurement field.

        :raises: SDKException if not connected or if the measurement field is not completely within the
                                thermal frame or if adding it failed.
        """
        return _otcsdk_python.IRImager_addMeasurementField(self, config)

    def setAutoFlagEnabled(self, enable):
        r"""
        Sets the automatic triggering of flag cycles en-/disabled.

        :type enable: boolean, in
        :param enable: or disable automatic triggering of flag cycles.
        """
        return _otcsdk_python.IRImager_setAutoFlagEnabled(self, enable)

    def isAutoFlagEnabled(self):
        r"""
        Returns whether flag cycles are triggered automatically.

        :rtype: boolean
        :return: true, if flag cycles are triggered automatically. False is automatic triggering is diabled or if not connected.
        """
        return _otcsdk_python.IRImager_isAutoFlagEnabled(self)

    def setFlagInterval(self, minInterval, maxInterval):
        r"""
        Sets the minimum and maximum flag intervals in seconds.

        :type minInterval: float, in
        :param minInterval: minimal time in seconds that has to elapse before a new flag cycle is triggered.
        :type maxInterval: float, in
        :param maxInterval: maximum time in seconds that can elapse until a new flag cycle is triggered. Set to 0 to
                                   deactivate.

        :raises: SDKException if provided intervals are negative.
        """
        return _otcsdk_python.IRImager_setFlagInterval(self, minInterval, maxInterval)

    def getFlagMinInterval(self):
        r"""
        Returns the minimum flag interval in seconds.

        Minimum time that has to elapse before a new flag cycle is triggered.

        :rtype: float
        :return: minimum flag interval in seconds or 0 if not connected.
        """
        return _otcsdk_python.IRImager_getFlagMinInterval(self)

    def getFlagMaxInterval(self):
        r"""
        Returns the maximum flag interval in seconds.

        Maximum time that can elapse before a new flag cycle is triggered.

        :rtype: float
        :return: maximum flag interval in seconds or 0 if not connected.
        """
        return _otcsdk_python.IRImager_getFlagMaxInterval(self)

    def forceFlagEvent(self, time=0.):
        r"""
        Force a flag cycle manually.

        :type time: float, in, optional
        :param time: point of time in future in milliseconds, when the shutter flag should be closed.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_forceFlagEvent(self, time)

    def isFlagOpen(self):
        r"""
        Returns whether the shutter flag is open.

        :rtype: boolean
        :return: true if the shutter flag is open. False if the shutter flag is closed or if not
                    connected.
        """
        return _otcsdk_python.IRImager_isFlagOpen(self)

    def setFlagForecastEnabled(self, enable):
        r"""
        Set the shutter flag forecast en-/disabled.

        :type enable: boolean
        :param enable: of disable the shutter flag forecast.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_setFlagForecastEnabled(self, enable)

    def isFlagForecastEnabled(self):
        r"""
        Returns whether the shutter flag forecast is en-/disabled.

        :rtype: boolean
        :return: true if the shutter flag forecast is enabled. False if flag forecast is disabled or if not
                    connected.
        """
        return _otcsdk_python.IRImager_isFlagForecastEnabled(self)

    def getWidth(self):
        r"""
        Returns the width in pixels of the thermal frame.

        :rtype: int
        :return: width in pixels of the thermal frame, i.e. number of columns or 0 if not connected.
        """
        return _otcsdk_python.IRImager_getWidth(self)

    def getHeight(self):
        r"""
        Returns the height in pixels of thermal frame.

        :rtype: int
        :return: height in pixels of the thermal frame, i.e. number of rows or 0 if not connected.
        """
        return _otcsdk_python.IRImager_getHeight(self)

    def getTemperatureFlag(self):
        r"""
        Returns the temperature of the shutter flag in 째C.

        :rtype: float
        :return: temperature of the shutter flag in 째C or INVALID_TEMPERATURE if not connected or
                    35.0 째C if connected but processing has not yet started (s. run() and runAsync()).
        """
        return _otcsdk_python.IRImager_getTemperatureFlag(self)

    def getTemperatureBox(self):
        r"""
        Returns the temperature of the device housing in 째C.

        :rtype: float
        :return: temperature of the device housing in 째C or INVALID_TEMPERATURE if not connected or 35.0 째C
                    if connected but processing has not yet started (s. run() and runAsync()).
        """
        return _otcsdk_python.IRImager_getTemperatureBox(self)

    def getTemperatureChip(self):
        r"""
        Returns the temperature of the sensor chip.

        :rtype: float
        :return: temperature of the sensor chip in 째C or INVALID_TEMPERATURE if not connected or
                    35.0 째C if connected but processing has not yet started (s. run() and runAsync()).
        """
        return _otcsdk_python.IRImager_getTemperatureChip(self)

    def setChipHeatingEnabled(self, enable):
        r"""
        Enables the heating of the sensor chip.

        :type enable: boolean, in
        :param enable: indicates whether to enable heating.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_setChipHeatingEnabled(self, enable)

    def isChipHeatingEnabled(self):
        r"""
        Return whether the sensor chip heating is enabled.

        :rtype: boolean
        :return: true, if the sensor chip heating is enabled. False if heating is disabled of if not connected.
        """
        return _otcsdk_python.IRImager_isChipHeatingEnabled(self)

    def setTemperatureChipReference(self, temperature):
        r"""
        Sets the reference temperature in 째C for the sensor chip heating.

        The specified temperature should be in [20, 55] 째C. If not, the temperature will automatically be clipped.
        The current chip temperature can be monitored with getTemperatureChip().

        :type temperature: float, in
        :param temperature: to set in 째C.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_setTemperatureChipReference(self, temperature)

    def getTemperatureChipReference(self):
        r"""
        Returns the reference temperature in 째C of the sensor chip heating.

        :rtype: float
        :return: temperature of the sensor chip in 째C or INVALID_TEMPERATURE if not connected.
        """
        return _otcsdk_python.IRImager_getTemperatureChipReference(self)

    def setRadiationParameters(self, *args):
        r"""
        Sets the radiation properties, i.e. emissivity and transmissivity parameters.

        :type emissivity: float, in
        :param emissivity:         of the observed object. Should be in [0, 1].
        :type transmissivity: float, in
        :param transmissivity:     of the observed object. Should be in [0, 1].
        :type ambientTemperature: float, in, optional
        :param ambientTemperature: in 째C Set it to INVALID_TEMPERATURE or less to force the SDK to estimate the
                                          ambient temperature based on thermal probe readings of the camera.

        :raises: SDKException if not connected or if parameters are invalid or if setting the parameters fails.
        """
        return _otcsdk_python.IRImager_setRadiationParameters(self, *args)

    def setFocusMotorPosition(self, position):
        r"""
        Sets the position of the focus motor.

        The position should be in [0, 100] %. If not, the position will automatically be clipped.

        :type position: float, in
        :param position: focus motor position in %.

        :raises: SDKException if not connected or if no focus motor is available.
        """
        return _otcsdk_python.IRImager_setFocusMotorPosition(self, position)

    def getFocusMotorPosition(self):
        r"""
        Returns the position of the focus motor.

        :rtype: float
        :return: focus motor position in % or -1.0 if not connected or if no focus motor is available.
        """
        return _otcsdk_python.IRImager_getFocusMotorPosition(self)

    def getTemperaturePrecision(self):
        r"""
        Returns the current precision of the thermal data.

        :rtype: int
        :return: current precision of the thermal data or unknown if not connected.
        """
        return _otcsdk_python.IRImager_getTemperaturePrecision(self)

    def setReferenceTemperature(self, *args):
        r"""
        Sets a reference temperature to a known reference source inside the view of the device to improve measurement accuracy.

        :type referenceTemperature: float, in
        :param referenceTemperature: real temperature of reference source.
        :type measuredTemperature: float, in
        :param measuredTemperature:  measured temperature from the device of reference source.
        :type ambientTemperature: float, in, optional
        :param ambientTemperature:   in 째C. Set it to INVALID_TEMPERATURE or less to force the SDK to estimate the
                                            ambient temperature based on thermal probe readings of the device.

        :raises: SDKException if setting the reference temperatures fails or if not connected.
        """
        return _otcsdk_python.IRImager_setReferenceTemperature(self, *args)

    def setDeviceNetworkConfig(self, networkConfig):
        r"""
        Sets the network configuration of the device.

        :type networkConfig: :py:class:`DeviceNetworkConfig`, in
        :param networkConfig: to set.

        :raises: SDKException if not connect via USB or if device does not support Ethernet or if setting the device network configuration
                                failed.
        """
        return _otcsdk_python.IRImager_setDeviceNetworkConfig(self, networkConfig)

    def getDeviceNetworkConfig(self):
        r"""
        Returns the network configuration of the device.

        :rtype: :py:class:`DeviceNetworkConfig`
        :return: network configuration of the device.

        :raises: SDKException if not connect via USB or if device does not support Ethernet or if getting the device network configuration
                                failed.
        """
        return _otcsdk_python.IRImager_getDeviceNetworkConfig(self)

    def getPif(self, *args):
        r"""
        *Overload 1:*

        Grants access to the process interface.

        Warning: The reference becomes invalid on disconnects.

        :rtype: :py:class:`ProcessInterface`
        :return: reference to the process interface.

        :raises: SDKException if not connected.

        |

        *Overload 2:*

        Grants read access to the process interface.

        Warning: The reference becomes invalid on disconnects.

        :rtype: :py:class:`ProcessInterface`
        :return: constant reference to the process interface.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_getPif(self, *args)

    def interruptFailSafe(self, active, reason):
        r"""
        Interrups the all clear fail safe signal.

        Notes: The client is only one source that can trigger the fail safe. If any of these sources detects an error, the fail safe
              will be triggered and it will only be released, if ALL the sources report an all clear.

        :type active: boolean, in
        :param active: if true the all clear signal is interrupted. If false, the all clear may be restored, if all other sources
                              report an all clear.
        :type reason: string, in
        :param reason: to be displayed in the logs.

        :raises: SDKException if not connected.
        """
        return _otcsdk_python.IRImager_interruptFailSafe(self, active, reason)

# Register IRImager in _otcsdk_python:
_otcsdk_python.IRImager_swigregister(IRImager)
class IRImagerFactory(object):
    r"""
    Factory instantiating IRImager implementations.

    The factory is implemented based on the Singleton design pattern. As a consequence, you have to use
    the IRImagerFactory::getInstance() method to interact with it.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getInstance():
        r"""
        Returns an instance of the IRImagerFactory.

        Only one instance per program is available.

        :rtype: :py:class:`IRImagerFactory`
        :return: IRImagerFactory instance.
        """
        return _otcsdk_python.IRImagerFactory_getInstance()

    def create(self, name):
        r"""
        Creates an instance of an IRImager implementation.

        :type name: string, in
        :param name: of the implementation to instantiate. The SDK supports the following options:
                            - `native` - IRImager implementation that supports native USB and Ethernet access to Optris Imagers.
                            (case insensitive)

        :rtype: :py:class:`IRImager`
        :return: shared pointer to created IRImager instance.

        :raises: SDKException if the instantiation fails or an implementation with the given name is not
                                available.
        """
        return _otcsdk_python.IRImagerFactory_create(self, name)
    __swig_destroy__ = _otcsdk_python.delete_IRImagerFactory

# Register IRImagerFactory in _otcsdk_python:
_otcsdk_python.IRImagerFactory_swigregister(IRImagerFactory)
class FramerateCounter(object):
    r"""
    Measures frame rates.

    Internally a linked list is used to average the time measurements. This list always has an even number of elements
    to avoid aliasing effects.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DEFAULT_INTERVAL = _otcsdk_python.FramerateCounter_DEFAULT_INTERVAL
    r""" Default interval in milliseconds."""
    DEFAULT_SMOOTH_SIZE = _otcsdk_python.FramerateCounter_DEFAULT_SMOOTH_SIZE
    r""" Default smoothing size."""

    def __init__(self, *args):
        r"""
        Constructor.

        :type interval: float, in, optional
        :param interval:   time interval in milliseconds. Can be used to check the elapsed time between two subsequent
                                  calls of the trigger() method.
        :type smoothSize: int, in, optional
        :param smoothSize: half the amount of data points used to calculate the frames per seconds. The resulting amount
                                  is rounded up to an even number.
        """
        _otcsdk_python.FramerateCounter_swiginit(self, _otcsdk_python.new_FramerateCounter(*args))
    __swig_destroy__ = _otcsdk_python.delete_FramerateCounter

    def trigger(self):
        r"""
        Takes a new time measurement and updates the frames per seconds.

        :rtype: boolean
        :return: true if more time has elapsed since the last call of this method than specified by the interval parameter
                    of the constructor. False otherwise.
        """
        return _otcsdk_python.FramerateCounter_trigger(self)

    def getFps(self):
        r"""
        Returns the current frames per seconds.

        :rtype: float
        :return: current frames per seconds.
        """
        return _otcsdk_python.FramerateCounter_getFps(self)

# Register FramerateCounter in _otcsdk_python:
_otcsdk_python.FramerateCounter_swigregister(FramerateCounter)
class TemperatureRegion(object):
    r"""
    Characterizes a rectangular region by the indexes of the upper left and the lower right corners
           along with an associated temperature.

    Note that the origin of coordinates is located in upper left corner with the x-axis pointing right and
    the y-axis pointing downwards.

     +---> x
     |
     v     1-----------+
     y     |           |
           |           |
           +-----------2

     => x1 <= x2 & y1 <= y2
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        *Overload 1:*
         Constructor.

        |

        *Overload 2:*

        Constructor.

        :type x1: int, in
        :param x1: x index of the upper left corner.
        :type y1: int, in
        :param y1: y index of the upper left corner.
        :type x2: int, in
        :param x2: x index of the lower right corner.
        :type y2: int, in
        :param y2: y index of the lower right corner.
        """
        _otcsdk_python.TemperatureRegion_swiginit(self, _otcsdk_python.new_TemperatureRegion(*args))

    def reset(self):
        r""" Resets the temperature and the coordinates of the corners."""
        return _otcsdk_python.TemperatureRegion_reset(self)

    def fitsInRectangle(self, width, height, padding=0):
        r"""
        Returns whether the region fits within a rectangle of the given dimensions.

        :type width: int, in
        :param width:   in pixels of the rectangle to fit the region in.
        :type height: int, in
        :param height:  in pixels of the rectangle to fit the region in.
        :type padding: int, in, optional
        :param padding: in pixels applied to the region in all directions during the check.

        :rtype: boolean
        :return: true if the region fits in the given rectangle. False otherwise.
        """
        return _otcsdk_python.TemperatureRegion_fitsInRectangle(self, width, height, padding)
    temperature = property(_otcsdk_python.TemperatureRegion_temperature_get, _otcsdk_python.TemperatureRegion_temperature_set, doc=r""" Associated temperature in 째C.""")
    x1 = property(_otcsdk_python.TemperatureRegion_x1_get, _otcsdk_python.TemperatureRegion_x1_set, doc=r""" X index of the upper left corner.""")
    y1 = property(_otcsdk_python.TemperatureRegion_y1_get, _otcsdk_python.TemperatureRegion_y1_set, doc=r""" Y index of the upper left corner.""")
    x2 = property(_otcsdk_python.TemperatureRegion_x2_get, _otcsdk_python.TemperatureRegion_x2_set, doc=r""" X index of the lower right corner.""")
    y2 = property(_otcsdk_python.TemperatureRegion_y2_get, _otcsdk_python.TemperatureRegion_y2_set, doc=r""" Y index of the lower right corner.""")
    __swig_destroy__ = _otcsdk_python.delete_TemperatureRegion

# Register TemperatureRegion in _otcsdk_python:
_otcsdk_python.TemperatureRegion_swigregister(TemperatureRegion)
ColoringPalette_AlarmBlue = _otcsdk_python.ColoringPalette_AlarmBlue
r""" Image: color_palette_alarm_blue.jpg"""
ColoringPalette_AlarmBlueHi = _otcsdk_python.ColoringPalette_AlarmBlueHi
r""" Image: color_palette_alarm_blue_hi.jpg"""
ColoringPalette_GrayBW = _otcsdk_python.ColoringPalette_GrayBW
r""" Image: color_palette_gray_bw.jpg"""
ColoringPalette_GrayWB = _otcsdk_python.ColoringPalette_GrayWB
r""" Image: color_palette_gray_wb.jpg"""
ColoringPalette_AlarmGreen = _otcsdk_python.ColoringPalette_AlarmGreen
r""" Image: color_palette_alarm_green.jpg"""
ColoringPalette_Iron = _otcsdk_python.ColoringPalette_Iron
r""" Image: color_palette_iron.jpg"""
ColoringPalette_IronHi = _otcsdk_python.ColoringPalette_IronHi
r""" Image: color_palette_iron_hi.jpg"""
ColoringPalette_Medical = _otcsdk_python.ColoringPalette_Medical
r""" Image: color_palette_medical.jpg"""
ColoringPalette_Rainbow = _otcsdk_python.ColoringPalette_Rainbow
r""" Image: color_palette_rainbow.jpg"""
ColoringPalette_RainbowHi = _otcsdk_python.ColoringPalette_RainbowHi
r""" Image: color_palette_rainbow_hi.jpg"""
ColoringPalette_AlarmRed = _otcsdk_python.ColoringPalette_AlarmRed
r""" Image: color_palette_alarm_red.jpg"""
PaletteScalingMethod_Manual = _otcsdk_python.PaletteScalingMethod_Manual
r""" User-defined upper and lower limit (fixed values)."""
PaletteScalingMethod_MinMax = _otcsdk_python.PaletteScalingMethod_MinMax
r""" Dynamic determination of minimum and maximum temperature as upper and lower limit."""
PaletteScalingMethod_Sigma1 = _otcsdk_python.PaletteScalingMethod_Sigma1
r""" Dynamic determination of upper and lower limit from standard deviation of temperature image."""
PaletteScalingMethod_Sigma3 = _otcsdk_python.PaletteScalingMethod_Sigma3
r""" Same as Sigma1, but with factor 3."""
class ImageBuilder(object):
    r""" Creates false color images from thermal frames."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, colorFormat, widthAlignment):
        r"""
        Constructor.

        Be mindful of which color format and width alignment you choose. Please refer to the documentation of the
        enums for more details.

        :type colorFormat: int, in
        :param colorFormat:    for the generated false color image.
        :type widthAlignment: int, in
        :param widthAlignment: for the generated false color image.
        """
        _otcsdk_python.ImageBuilder_swiginit(self, _otcsdk_python.new_ImageBuilder(colorFormat, widthAlignment))

    def setThermalFrame(self, thermalFrame):
        r"""
        Sets a new thermal frame.

        The provide frame will be copied to an internal buffer.

        :type thermalFrame: :py:class:`ThermalFrame`, in
        :param thermalFrame: data.
        """
        return _otcsdk_python.ImageBuilder_setThermalFrame(self, thermalFrame)

    def getThermalFrame(self):
        r"""
        Grants read access to the stored thermal frame.

        :rtype: :py:class:`ThermalFrame`
        :return: const reference to the stored thermal frame.
        """
        return _otcsdk_python.ImageBuilder_getThermalFrame(self)

    def getWidth(self):
        r"""
        Returns the width in pixels of the thermal frame.

        :rtype: int
        :return: width in pixels of the thermal frame.
        """
        return _otcsdk_python.ImageBuilder_getWidth(self)

    def getHeight(self):
        r"""
        Returns the height in pixels of thermal frame.

        :rtype: int
        :return: height in pixels of thermal frame.
        """
        return _otcsdk_python.ImageBuilder_getHeight(self)

    def getTemperature(self, *args):
        r"""
        *Overload 1:*

        Returns the temperature the from last acquired image at specified pixel index.

        :type index: int, in
        :param index: pixel index.

        :rtype: float
        :return: temperature in 째C.

        :raises: SDKException if index is out of range.

        |

        *Overload 2:*

        Returns the temperature from last acquired image at specified pixel coordinates.

        The origin of coordinates is located in the upper left corner with the x-axis pointing right and
        the y-axis pointing downwards.

        :type x: int, in
        :param x: coordinates.
        :type y: int, in
        :param y: coordinates.

        :rtype: float
        :return: temperature in 째C.

        :raises: SDKException if coordinates are out of range.
        """
        return _otcsdk_python.ImageBuilder_getTemperature(self, *args)

    def getMeanTemperatureInRegion(self, meanRegion):
        r"""
        Returns the mean temperature in 째C of a rectangular region.

        Before providing the region to this method you have to define the rectangular area it covers by
        specifying its upper left and lower right corners.

        :type meanRegion: :py:class:`TemperatureRegion`, out
        :param meanRegion: in which to calculate the mean temperature.

        :rtype: boolean
        :return: true if a mean temperature could be calculated. False if no thermal data is available or
                    if the region coordinates are inconstent or if the region is too large for the frame.
        """
        return _otcsdk_python.ImageBuilder_getMeanTemperatureInRegion(self, meanRegion)

    def getMinMaxRegions(self, radius, minRegion, maxRegion):
        r"""
        Returns the region of minimum/maximum temperature in 째C with the given radius.

        The method will fill in all the data for the min and max temperature region.

        :type radius: int, in
        :param radius:    radius of the region.
        :type minRegion: :py:class:`TemperatureRegion`, out
        :param minRegion: region of minimum mean temperature.
        :type maxRegion: :py:class:`TemperatureRegion`, out
        :param maxRegion: region of maximum mean temperature.

        :rtype: boolean
        :return: true if minimum/maximum temperature could be calculated. False if no thermal data is available
                    or if the radius is to large for the frame.
        """
        return _otcsdk_python.ImageBuilder_getMinMaxRegions(self, radius, minRegion, maxRegion)

    def setManualTemperatureRange(self, min, max):
        r"""
        Sets the temperature range for the manual scaling method.

        :type min: float, in
        :param min: lower limit in 째C.
        :type max: float, in
        :param max: upper limit in 째C.
        """
        return _otcsdk_python.ImageBuilder_setManualTemperatureRange(self, min, max)

    def getIsothermalMin(self):
        r"""
        Returns the minimum temperature used to scale the image.

        :rtype: float
        :return: temperature in 째C.
        """
        return _otcsdk_python.ImageBuilder_getIsothermalMin(self)

    def getIsothermalMax(self):
        r"""
        Returns the maximum temperature used to scale the image.

        :rtype: float
        :return: Temperature in 째C
        """
        return _otcsdk_python.ImageBuilder_getIsothermalMax(self)

    def setPaletteScalingMethod(self, method):
        r"""
        Sets the scaling method for the false color conversion.

        :type method: int, in
        :param method: scaling method.
        """
        return _otcsdk_python.ImageBuilder_setPaletteScalingMethod(self, method)

    def getPaletteScalingMethod(self):
        r"""
        Returns the current scaling method for the false color conversion.

        :rtype: int
        :return: scaling method.
        """
        return _otcsdk_python.ImageBuilder_getPaletteScalingMethod(self)

    def setPalette(self, palette):
        r"""
        Sets the palette for the false color conversion.

        :type palette: int, in
        :param palette: coloring palette to set.
        """
        return _otcsdk_python.ImageBuilder_setPalette(self, palette)

    def getPalette(self):
        r"""
        Returns the palette for the false color conversion.

        :rtype: int
        :return: used coloring palette.
        """
        return _otcsdk_python.ImageBuilder_getPalette(self)

    def getImage(self):
        r"""
        Grants read access to the generated false color image.

        :rtype: :py:class:`Image`
        :return: const reference to the generated false color image.
        """
        return _otcsdk_python.ImageBuilder_getImage(self)

    def getImageSizeInBytes(self):
        r"""
        Returns the image size in bytes including potential width padding.

        :rtype: int
        :return: image size in bytes including potential width padding.
        """
        return _otcsdk_python.ImageBuilder_getImageSizeInBytes(self)

    def getImageStride(self):
        r"""
        Returns the image stride in bytes.

        The stride is the image width in bytes including potential padding.

        :rtype: int
        :return: image stride in bytes.
        """
        return _otcsdk_python.ImageBuilder_getImageStride(self)

    def copyImageDataTo(self, destination):
        r"""
        Copies the false color image data to the given destination array.

        :type destination: unsigned char, out
        :param destination: array to copy the false color image data to.
        :type size: int, in
        :param size:        in bytes. The specified size is limited to [0, image size in bytes].
        """
        return _otcsdk_python.ImageBuilder_copyImageDataTo(self, destination)

    def convertTemperatureToPaletteImage(self):
        r""" Triggers the image conversion."""
        return _otcsdk_python.ImageBuilder_convertTemperatureToPaletteImage(self)
    __swig_destroy__ = _otcsdk_python.delete_ImageBuilder

# Register ImageBuilder in _otcsdk_python:
_otcsdk_python.ImageBuilder_swigregister(ImageBuilder)

